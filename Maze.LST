C51 COMPILER V6.02  MAZE                                                                   05/10/2016 20:12:52 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE MAZE
OBJECT MODULE PLACED IN .\Maze.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\Maze.c DEBUG OBJECTEXTEND

stmt level    source

   1          #include<reg932.h>
   2          #include<stdlib.h>
   3          #include"uart.h"
   4          #include "maps.h"
   5          
   6          sbit LED1 = P2 ^ 4;
   7          sbit LED2 = P0 ^ 5;
   8          sbit LED3 = P2 ^ 7;
   9          sbit LED4 = P0 ^ 6;
  10          sbit LED5 = P1 ^ 6;
  11          sbit LED6 = P0 ^ 4;
  12          sbit LED7 = P2 ^ 5;
  13          sbit LED8 = P0 ^ 7;
  14          sbit LED9 = P2 ^ 6;
  15          
  16          sbit SW1 = P2 ^ 0;
  17          sbit SW2 = P0 ^ 1;
  18          sbit SW3 = P2 ^ 3;
  19          sbit SW4 = P0 ^ 2;
  20          sbit SW5 = P1 ^ 4;
  21          sbit SW6 = P0 ^ 0;
  22          sbit SW8 = P0 ^ 3;
  23          
  24          
  25          
  26          void delay(long x)
  27          {
  28   1      	long i = 0;
  29   1      	for (i; i<x; i++);
  30   1      }
  31          
  32          void cheatMap(const char** map_array, unsigned char arr_x, unsigned char arr_y) //rename map_array to grou
             -p code name for the map array
  33          {
  34   1      	unsigned char i;
  35   1      	unsigned char j;
  36   1      	for (i = 0; i < arr_x; i++)
  37   1      	{
  38   2      
  39   2      		for (j = 0; j < arr_y; j++)
  40   2      		{
  41   3      			uart_transmit(map_array[i][j]);
  42   3      		}
  43   2      		uart_transmit('\n'); //I think this will work?
  44   2      	}
  45   1      	uart_transmit(arr_x);
  46   1      	uart_transmit('\n');
  47   1      	uart_transmit(arr_y);
  48   1      	return;
  49   1      }
  50          
  51          void Redraw_Map(unsigned char Play_x, unsigned char Play_y, const char** Map)
  52          {
  53   1      	unsigned char i = 0;
  54   1      	//Shows what the 8 spaces around the player are
C51 COMPILER V6.02  MAZE                                                                   05/10/2016 20:12:52 PAGE 2   

  55   1      	//LED1
  56   1      	if (Map[Play_x - 1][Play_y - 1] == 'W') //Wall
  57   1      		LED1 = 0;
  58   1      	else if (Map[Play_x - 1][Play_y - 1] == 'G')
  59   1      	{
  60   2      		for (i; i < 3; i++)
  61   2      		{
  62   3      			LED1 = 0;
  63   3      			delay(100);
  64   3      			LED1 = 1;
  65   3      			delay(100);
  66   3      		}
  67   2      	}
  68   1      	else //Open
  69   1      		LED1 = 1;
  70   1      	//LED2
  71   1      	if (Map[Play_x][Play_y - 1] == 'W') //Wall
  72   1      		LED2 = 0;
  73   1      	else if (Map[Play_x][Play_y - 1] == 'G') //Goal
  74   1      	{
  75   2      		for (i; i < 3; i++)
  76   2      		{
  77   3      			LED2 = 0;
  78   3      			delay(100);
  79   3      			LED2 = 1;
  80   3      			delay(100);
  81   3      		}
  82   2      	}
  83   1      	else //Open
  84   1      		LED2 = 1;
  85   1      	//LED3
  86   1      	if (Map[Play_x + 1][Play_y - 1] == 'W') //Wall
  87   1      		LED3 = 0;
  88   1      	else if (Map[Play_x + 1][Play_y - 1] == 'G') //Goal
  89   1      	{
  90   2      		for (i; i < 3; i++)
  91   2      		{
  92   3      			LED3 = 0;
  93   3      			delay(100);
  94   3      			LED3 = 1;
  95   3      			delay(100);
  96   3      		}
  97   2      	}
  98   1      	else //Open
  99   1      		LED3 = 1;
 100   1      	//LED4
 101   1      	if (Map[Play_x - 1][Play_y] == 'W') //Wall
 102   1      		LED4 = 0;
 103   1      	else if (Map[Play_x - 1][Play_y] == 'G') //Goal
 104   1      	{
 105   2      		for (i; i < 3; i++)
 106   2      		{
 107   3      			LED4 = 0;
 108   3      			delay(100);
 109   3      			LED4 = 1;
 110   3      			delay(100);
 111   3      		}
 112   2      	}
 113   1      	else //Open
 114   1      		LED4 = 1;
 115   1      	//LED5
 116   1      	if (Map[Play_x][Play_y] == 'W') //Wall
C51 COMPILER V6.02  MAZE                                                                   05/10/2016 20:12:52 PAGE 3   

 117   1      		LED5 = 0;
 118   1      	else if (Map[Play_x][Play_y] == 'G') //Goal
 119   1      	{
 120   2      		for (i; i < 3; i++)
 121   2      		{
 122   3      			LED5 = 0;
 123   3      			delay(100);
 124   3      			LED5 = 1;
 125   3      			delay(100);
 126   3      		}
 127   2      	}
 128   1      	else //Open
 129   1      		LED5 = 1;
 130   1      	//LED6
 131   1      	if (Map[Play_x + 1][Play_y] == 'W') //Wall
 132   1      		LED6 = 0;
 133   1      	else if (Map[Play_x + 1][Play_y] == 'G') //Goal
 134   1      	{
 135   2      		for (i; i < 3; i++)
 136   2      		{
 137   3      			LED6 = 0;
 138   3      			delay(100);
 139   3      			LED6 = 1;
 140   3      			delay(100);
 141   3      		}
 142   2      	}
 143   1      	else //Open
 144   1      		LED6 = 1;
 145   1      	//LED7
 146   1      	if (Map[Play_x - 1][Play_y + 1] == 'W') //Wall
 147   1      		LED7 = 0;
 148   1      	else if (Map[Play_x - 1][Play_y + 1] == 'G') //Goal
 149   1      	{
 150   2      		for (i; i < 3; i++)
 151   2      		{
 152   3      			LED7 = 0;
 153   3      			delay(100);
 154   3      			LED7 = 1;
 155   3      			delay(100);
 156   3      		}
 157   2      	}
 158   1      	else //Open
 159   1      		LED7 = 1;
 160   1      	//LED8
 161   1      	if (Map[Play_x][Play_y + 1] == 'W') //Wall
 162   1      		LED8 = 0;
 163   1      	else if (Map[Play_x][Play_y + 1] == 'G') //Goal
 164   1      	{
 165   2      		for (i; i < 3; i++)
 166   2      		{
 167   3      			LED8 = 0;
 168   3      			delay(100);
 169   3      			LED8 = 1;
 170   3      			delay(100);
 171   3      		}
 172   2      	}
 173   1      	else //Open
 174   1      		LED8 = 1;
 175   1      	//LED9
 176   1      	if (Map[Play_x + 1][Play_y + 1] == 'W') //Wall
 177   1      		LED9 = 0;
 178   1      	else if (Map[Play_x + 1][Play_y + 1] == 'G') //Goal
C51 COMPILER V6.02  MAZE                                                                   05/10/2016 20:12:52 PAGE 4   

 179   1      	{
 180   2      		for (i; i < 3; i++)
 181   2      		{
 182   3      			LED9 = 0;
 183   3      			delay(100);
 184   3      			LED9 = 1;
 185   3      			delay(100);
 186   3      		}
 187   2      	}
 188   1      	else //Open
 189   1      		LED9 = 1;
 190   1      
 191   1      }
 192          
 193          //Button Actions
 194          //Up button
 195          void Up (unsigned char Play_x,unsigned char Play_y, const char** Map) {
 196   1      	if (Map[Play_x][Play_y-1]!= 'W') 
 197   1      		Play_y -= 1;
 198   1      	Redraw_Map(Play_x, Play_y, Map);
 199   1      	return;
 200   1      }
 201          
 202          //Down
 203          void Down (unsigned char Play_x,unsigned char Play_y, const char** Map) {
 204   1      	if (Map[Play_x][Play_y + 1] != 'W')
 205   1      		Play_y += 1;
 206   1      	Redraw_Map(Play_x, Play_y, Map);
 207   1      	return;
 208   1      }
 209          
 210          //Right 
 211          void Right(unsigned char Play_x,unsigned char Play_y, const char** Map) {
 212   1      	if (Map[Play_x + 1][Play_y] != 'W')
 213   1      		Play_x += 1;
 214   1      	Redraw_Map(Play_x, Play_y, Map);
 215   1      	return;
 216   1      }
 217          
 218          //Left 
 219          void Left(unsigned char Play_x,unsigned char Play_y, const char** Map) {
 220   1      	if (Map[Play_x - 1][Play_y] != 'W')
 221   1      		Play_x -= 1;
 222   1      	Redraw_Map(Play_x, Play_y, Map);
 223   1      	return;
 224   1      }
 225          //Check if Player is at goal
 226          
 227          void GameStart(const char** Map, const unsigned char Start_x, const unsigned char Start_y) {
 228   1      	unsigned char GameOver = 0; //reset every new game
 229   1      	unsigned char Play_x = Start_x;	//Load starting positions
 230   1      	unsigned char Play_y = Start_y;
 231   1      	unsigned char i = 0;
 232   1      	unsigned char k = 0;
 233   1      
 234   1      	Redraw_Map(Play_x, Play_y, Map);
 235   1      
 236   1      	while (GameOver == 0) { //This loop plays the game until finished
 237   2      		while (SW1 == 0 || SW3 == 0 || SW2 == 0 || SW8 == 0 || SW4 == 0 || SW6 == 0) { //Check if any input
 238   3      			//Nothing to do here
 239   3      		}
 240   2      
C51 COMPILER V6.02  MAZE                                                                   05/10/2016 20:12:52 PAGE 5   

 241   2      		delay(10);
 242   2      			//waiting for input
 243   2      		if (SW1 == 0) //Exit Button
 244   2      			GameOver = 0;
 245   2      		else if (SW5 == 0) // Help Button
 246   2      			;//Help(Play_x, Play_y, Map[][]);
 247   2      		else if (SW2 == 0)
 248   2      			Up(Play_x, Play_y, Map);
 249   2      		else if (SW8 == 0)
 250   2      			Down(Play_x, Play_y, Map);
 251   2      		else if (SW4 == 0)
 252   2      			Left(Play_x, Play_y, Map);
 253   2      		else if (SW6 == 0)
 254   2      			Right(Play_x, Play_y, Map);
 255   2      		else if (SW3 == 0)
 256   2      			cheatMap(Map, Play_x, Play_y);
 257   2      			//Check if Game Over
 258   2      		if (Map[Play_x][Play_y] == 'G')
 259   2      			GameOver = 1;
 260   2      	}
 261   1      	return;
 262   1      }
 263          
 264          
 265          
 266          void playMenu()
 267          {
 268   1      	char* title = "Simon's A-MAZE-ing Adventures!";
 269   1      	char* star_bar = "*********************************";
 270   1      	char* menu1 = "Please select difficulty level: \n";
 271   1      	char* menu2 = "1) Easy          2) Medium          3) Hard          4)DEBUG \n";
 272   1      
 273   1      	unsigned char titlesize = sizeof(title) / sizeof(title[0]);
 274   1      	unsigned char starsize = sizeof(star_bar) / sizeof(title[0]);
 275   1      	unsigned char menu1size = sizeof(menu1) / sizeof(title[0]);
 276   1      	unsigned char menu2size = sizeof(menu2) / sizeof(title[0]);
 277   1      
 278   1      	unsigned char i;
 279   1      	for (i = 0; i < starsize; i++)
 280   1      	{
 281   2      		uart_transmit(star_bar[i]);
 282   2      	}
 283   1      	uart_transmit('\n');
 284   1      	for (i = 0; i < titlesize; i++)
 285   1      	{
 286   2      		uart_transmit(title[i]);
 287   2      	}
 288   1      	uart_transmit('\n');
 289   1      	for (i = 0; i < starsize; i++)
 290   1      	{
 291   2      		uart_transmit(star_bar[i]);
 292   2      	}
 293   1      	uart_transmit('\n');
 294   1      	uart_transmit('\n');
 295   1      	for (i = 0; i < menu1size; i++)
 296   1      	{
 297   2      		uart_transmit(menu1[i]);
 298   2      	}
 299   1      	uart_transmit('\n');
 300   1      	for (i = 0; i < menu2size; i++)
 301   1      	{
 302   2      		uart_transmit(menu2[i]);
C51 COMPILER V6.02  MAZE                                                                   05/10/2016 20:12:52 PAGE 6   

 303   2      	}
 304   1      	uart_transmit('\n');
 305   1      
 306   1      	while (1)
 307   1      	{
 308   2      		if (SW1 == 0) //Exit Button
 309   2      			GameStart(&map1[7][7], M1startX, M1startY);
*** WARNING C182 IN LINE 309 OF .\MAZE.C: pointer to different objects
 310   2      		//victory
 311   2      		else if (P2^1 == 0)
 312   2      			GameStart(&map2[7][7], M2startX, M2startY);
*** WARNING C182 IN LINE 312 OF .\MAZE.C: pointer to different objects
 313   2      		//victory
 314   2      		else if (P2^2 == 0)
 315   2      			GameStart(&map3[12][12], M3startX, M3startY);
*** WARNING C182 IN LINE 315 OF .\MAZE.C: pointer to different objects
 316   2      		//victory
 317   2      	}
 318   1      
 319   1      	return;
 320   1      }
 321          
 322          //Looping Code for playing the game
 323          void main(void)
 324          {
 325   1      	uart_init();
 326   1      	P2M1 = 0x00;
 327   1      	
 328   1      	while (1)
 329   1      	{
 330   2      		playMenu();
 331   2      	}
 332   1      
 333   1      	return;
 334   1      }	
*** ERROR C249 IN LINE 334 OF .\MAZE.C: 'DATA': SEGMENT TOO LARGE

C51 COMPILATION COMPLETE.  3 WARNING(S),  1 ERROR(S)
