C51 COMPILER V6.02  MAZE                                                                   05/12/2016 14:03:22 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE MAZE
OBJECT MODULE PLACED IN .\Maze.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\Maze.c DEBUG OBJECTEXTEND

stmt level    source

   1          #include<reg932.h>
   2          #include<stdlib.h>
   3          #include "maps.h"
   4          #include "uart.h"
   5          
   6          sbit LED1 = P2 ^ 4;
   7          sbit LED2 = P0 ^ 5;
   8          sbit LED3 = P2 ^ 7;
   9          sbit LED4 = P0 ^ 6;
  10          sbit LED5 = P1 ^ 6;
  11          sbit LED6 = P0 ^ 4;
  12          sbit LED7 = P2 ^ 5;
  13          sbit LED8 = P0 ^ 7;
  14          sbit LED9 = P2 ^ 6;
  15          
  16          sbit SW1 = P2 ^ 0;
  17          sbit SW2 = P0 ^ 1;
  18          sbit SW3 = P2 ^ 3;
  19          sbit SW4 = P0 ^ 2;
  20          sbit SW5 = P1 ^ 4;
  21          sbit SW6 = P0 ^ 0;
  22          sbit SW7 = P2 ^ 1;
  23          sbit SW8 = P0 ^ 3;
  24          sbit SW9 = P2 ^ 2;
  25          
  26          sbit SPEAK = P1 ^ 7;
  27          
  28          void delay (long x);
  29          void cheatMap(/*const*/ char map_array[12][12], /*const*/ unsigned char arr_x, /*const*/ unsigned char arr
             -_y);
  30          void Redraw_Map(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  31          char Up(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  32          char Down(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  33          char Left(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  34          char Right(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  35          char GameStart(/*const*/ char Map[12][12], /*const*/ unsigned char Start_x, /*const*/ unsigned char Start_
             -y);
  36          void playMenu();
  37          void clearGame();
  38          void wallHit(void);
  39          void Delay250HZ(void);
  40          void win(void);
  41          void finish(char n, char d);
  42          void finish(char n, char d);
  43          void sdelay(int time);
  44          void Help(unsigned char Play_x, unsigned char Play_y, char Map[12][12]);
  45          
  46          
  47          //Looping Code for playing the game
  48          void main(void)
  49          {
  50   1      	P0M1 = 0;
  51   1      	P1M1 = 0;
  52   1      	P2M1 = 0;
  53   1      	P3M1 = 0;
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 14:03:22 PAGE 2   

  54   1      	TMOD = 0x11;
  55   1      	/*EA = 1;
  56   1      	ET0 = 1;*/
  57   1      
  58   1      	uart_init();
  59   1      	
  60   1      	while (1)
  61   1      	{
  62   2      		playMenu();
  63   2      		clearGame();
  64   2      	}
  65   1      
  66   1      	return;
  67   1      }	
  68          
  69          /*void delay(long x)
  70          {
  71          	long i = 0;
  72          	for (i; i<x; i++);
  73          }*/
  74          
  75          void cheatMap(/*const*/ char map_array[12][12], unsigned char arr_x, unsigned char arr_y) //rename map_arr
             -ay to group code name for the map array
  76          {
  77   1      	unsigned char i;
  78   1      	unsigned char j;
  79   1      	for (i = 0; i < arr_x; i++)
  80   1      	{
  81   2      
  82   2      		for (j = 0; j < arr_y; j++)
  83   2      		{
  84   3      			uart_transmit(map_array[j][i]);
  85   3      		}
  86   2      		uart_transmit('\n');
  87   2      		uart_transmit('\r');//I think this will work?
  88   2      	}
  89   1      	return;
  90   1      }
  91          
  92          void Redraw_Map(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12])
  93          {
  94   1      	unsigned char i = 0;
  95   1      	//Shows what the 8 spaces around the player are
  96   1      	//LED1
  97   1      	if (Map[Play_x - 1][Play_y - 1] == 'W') //Wall
  98   1      		LED1 = 0;
  99   1      	else if (Map[Play_x - 1][Play_y - 1] == 'G')
 100   1      	{
 101   2      		for (i; i < 3; i++)
 102   2      		{
 103   3      			LED1 = 0;
 104   3      			delay(10000);
 105   3      			LED1 = 1;
 106   3      			delay(10000);
 107   3      		}
 108   2      	}
 109   1      	else //Open
 110   1      		LED1 = 1;
 111   1      	//LED2
 112   1      	if (Map[Play_x][Play_y - 1] == 'W') //Wall
 113   1      		LED2 = 0;
 114   1      	else if (Map[Play_x][Play_y - 1] == 'G') //Goal
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 14:03:22 PAGE 3   

 115   1      	{
 116   2      		for (i; i < 3; i++)
 117   2      		{
 118   3      			LED2 = 0;
 119   3      			delay(10000);
 120   3      			LED2 = 1;
 121   3      			delay(10000);
 122   3      		}
 123   2      	}
 124   1      	else //Open
 125   1      		LED2 = 1;
 126   1      	//LED3
 127   1      	if (Map[Play_x + 1][Play_y - 1] == 'W') //Wall
 128   1      		LED3 = 0;
 129   1      	else if (Map[Play_x + 1][Play_y - 1] == 'G') //Goal
 130   1      	{
 131   2      		for (i; i < 3; i++)
 132   2      		{
 133   3      			LED3 = 0;
 134   3      			delay(10000);
 135   3      			LED3 = 1;
 136   3      			delay(10000);
 137   3      		}
 138   2      	}
 139   1      	else //Open
 140   1      		LED3 = 1;
 141   1      	//LED4
 142   1      	if (Map[Play_x - 1][Play_y] == 'W') //Wall
 143   1      		LED4 = 0;
 144   1      	else if (Map[Play_x - 1][Play_y] == 'G') //Goal
 145   1      	{
 146   2      		for (i; i < 3; i++)
 147   2      		{
 148   3      			LED4 = 0;
 149   3      			delay(10000);
 150   3      			LED4 = 1;
 151   3      			delay(10000);
 152   3      		}
 153   2      	}
 154   1      	else //Open
 155   1      		LED4 = 1;
 156   1      	//LED5
 157   1      	if (Map[Play_x][Play_y] == 'W') //Wall
 158   1      		LED5 = 0;
 159   1      	else if (Map[Play_x][Play_y] == 'G') //Goal
 160   1      	{
 161   2      		for (i; i < 3; i++)
 162   2      		{
 163   3      			LED5 = 0;
 164   3      			delay(10000);
 165   3      			LED5 = 1;
 166   3      			delay(10000);
 167   3      		}
 168   2      	}
 169   1      	else //Open
 170   1      		LED5 = 1;
 171   1      	//LED6
 172   1      	if (Map[Play_x + 1][Play_y] == 'W') //Wall
 173   1      		LED6 = 0;
 174   1      	else if (Map[Play_x + 1][Play_y] == 'G') //Goal
 175   1      	{
 176   2      		for (i; i < 3; i++)
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 14:03:22 PAGE 4   

 177   2      		{
 178   3      			LED6 = 0;
 179   3      			delay(10000);
 180   3      			LED6 = 1;
 181   3      			delay(10000);
 182   3      		}
 183   2      	}
 184   1      	else //Open
 185   1      		LED6 = 1;
 186   1      	//LED7
 187   1      	if (Map[Play_x - 1][Play_y + 1] == 'W') //Wall
 188   1      		LED7 = 0;
 189   1      	else if (Map[Play_x - 1][Play_y + 1] == 'G') //Goal
 190   1      	{
 191   2      		for (i; i < 3; i++)
 192   2      		{
 193   3      			LED7 = 0;
 194   3      			delay(10000);
 195   3      			LED7 = 1;
 196   3      			delay(10000);
 197   3      		}
 198   2      	}
 199   1      	else //Open
 200   1      		LED7 = 1;
 201   1      	//LED8
 202   1      	if (Map[Play_x][Play_y + 1] == 'W') //Wall
 203   1      		LED8 = 0;
 204   1      	else if (Map[Play_x][Play_y + 1] == 'G') //Goal
 205   1      	{
 206   2      		for (i; i < 3; i++)
 207   2      		{
 208   3      			LED8 = 0;
 209   3      			delay(10000);
 210   3      			LED8 = 1;
 211   3      			delay(10000);
 212   3      		}
 213   2      	}
 214   1      	else //Open
 215   1      		LED8 = 1;
 216   1      	//LED9
 217   1      	if (Map[Play_x + 1][Play_y + 1] == 'W') //Wall
 218   1      		LED9 = 0;
 219   1      	else if (Map[Play_x + 1][Play_y + 1] == 'G') //Goal
 220   1      	{
 221   2      		for (i; i < 3; i++)
 222   2      		{
 223   3      			LED9 = 0;
 224   3      			delay(10000);
 225   3      			LED9 = 1;
 226   3      			delay(10000);
 227   3      		}
 228   2      	}
 229   1      	else //Open
 230   1      		LED9 = 1;
 231   1      
 232   1      	return;
 233   1      }
 234          //Button Actions
 235          //Up button
 236          char Up(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 237   1      	if (Map[Play_x][Play_y - 1] != 'W')
 238   1      		Play_y -= 1;
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 14:03:22 PAGE 5   

 239   1      	else
 240   1      	{
 241   2      		wallHit();
 242   2      		delay(10000);
 243   2      		wallHit();
 244   2      	}
 245   1      	Redraw_Map(Play_x, Play_y, Map);
 246   1      	return Play_y;
 247   1      }
 248          
 249          //Down
 250          char Down(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 251   1      	if (Map[Play_x][Play_y + 1] != 'W')
 252   1      		Play_y += 1;
 253   1      	else
 254   1      	{
 255   2      		wallHit();
 256   2      		delay(10000);
 257   2      		wallHit();
 258   2      	}
 259   1      	Redraw_Map(Play_x, Play_y, Map);
 260   1      	return Play_y;
 261   1      }
 262          
 263          //Right 
 264          char Right(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 265   1      	if (Map[Play_x + 1][Play_y] != 'W')
 266   1      		Play_x += 1;
 267   1      	else
 268   1      	{
 269   2      		wallHit();
 270   2      		delay(10000);
 271   2      		wallHit();
 272   2      	}
 273   1      	Redraw_Map(Play_x, Play_y, Map);
 274   1      	return Play_x;
 275   1      }
 276          
 277          //Left 
 278          char Left(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 279   1      	if (Map[Play_x - 1][Play_y] != 'W')
 280   1      		Play_x -= 1;
 281   1      	else
 282   1      	{
 283   2      		wallHit();
 284   2      		delay(10000);
 285   2      		wallHit();
 286   2      	}
 287   1      	Redraw_Map(Play_x, Play_y, Map);
 288   1      	return Play_x;
 289   1      }
 290          //Check if Player is at goal
 291          
 292          char GameStart(/*const*/ char Map[12][12], /*const*/ unsigned char Start_x, /*const*/ unsigned char Start_
             -y) {
 293   1      	unsigned char GameOver = 0; //reset every new game
 294   1      	unsigned char Play_x = Start_x;	//Load starting positions
 295   1      	unsigned char Play_y = Start_y;
 296   1      	unsigned char i = 0;
 297   1      	unsigned char k = 0;
 298   1      
 299   1      	//to transmit a number, use value+48
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 14:03:22 PAGE 6   

 300   1      
 301   1      	Redraw_Map(Play_x, Play_y, Map);
 302   1      
 303   1      	while (GameOver == 0) 
 304   1      	{ //This loop plays the game until finished
 305   2      		while (SW1 == 0 || SW3 == 0 || SW2 == 0 || SW8 == 0 || SW4 == 0 || SW6 == 0) 
 306   2      		{ //Check if any input
 307   3      			//Nothing to do here
 308   3      		}
 309   2      
 310   2      		delay(10);
 311   2      
 312   2      		//waiting for input
 313   2      		if (SW1 == 0) //Exit Button
 314   2      			GameOver = 1;
 315   2      		else if (SW5 == 0) // Help Button
 316   2      			Help(Play_x, Play_y, Map);
 317   2      		else if (SW2 == 0)
 318   2      			Play_y = Up(Play_x, Play_y, Map);
 319   2      		else if (SW8 == 0)
 320   2      			Play_y = Down(Play_x, Play_y, Map);
 321   2      		else if (SW4 == 0)
 322   2      			Play_x = Left(Play_x, Play_y, Map);
 323   2      		else if (SW6 == 0)
 324   2      			Play_x = Right(Play_x, Play_y, Map);
 325   2      		else if (SW3 == 0)
 326   2      			cheatMap(Map, 12, 12);
 327   2      		//Check if Game Over
 328   2      		if (Map[Play_x][Play_y] == 'G'){
 329   3      			GameOver = 1;
 330   3      			win();
 331   3      		}
 332   2      			
 333   2      	}
 334   1      	return GameOver;
 335   1      }
 336          
 337          void playMenu()
 338          {
 339   1      	char reset = 0;
 340   1      	
 341   1      	char* title = "Simon's A-MAZE-ing Adventures!";
 342   1      	char* star_bar = "*********************************";
 343   1      	char* menu1 = "Please select difficulty level: \n";
 344   1      	char* menu2 = "1) Easy          2) Medium          3) Hard \n";
 345   1      
 346   1      	unsigned char i = 0;
 347   1      	while (star_bar[i] != '\0')
 348   1      	{
 349   2      		uart_transmit(star_bar[i]);
 350   2      		i++;
 351   2      	}
 352   1      	uart_transmit('\n');
 353   1      	uart_transmit('\r');
 354   1      	i = 0;
 355   1      	while (title[i] != '\0')
 356   1      	{
 357   2      		uart_transmit(title[i]);
 358   2      		i++;
 359   2      	}
 360   1      	uart_transmit('\n');
 361   1      	uart_transmit('\r');
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 14:03:22 PAGE 7   

 362   1      	i = 0;
 363   1      	while (star_bar[i] != '\0')
 364   1      	{
 365   2      		uart_transmit(star_bar[i]);
 366   2      		i++;
 367   2      	}
 368   1      	uart_transmit('\n');
 369   1      	uart_transmit('\r');
 370   1      	uart_transmit('\n');
 371   1      	uart_transmit('\r');
 372   1      	i = 0;
 373   1      	while (menu1[i] != '\0')
 374   1      	{
 375   2      		uart_transmit(menu1[i]);
 376   2      		i++;
 377   2      	}
 378   1      	uart_transmit('\n');
 379   1      	uart_transmit('\r');
 380   1      	i = 0;
 381   1      	while (menu2[i] != '\0')
 382   1      	{
 383   2      		uart_transmit(menu2[i]);
 384   2      		i++;
 385   2      	}
 386   1      	uart_transmit('\n');
 387   1      	uart_transmit('\r');
 388   1      	i = 0;
 389   1      
 390   1      	while (reset == 0)
 391   1      	{
 392   2      		if (SW3 == 0)
 393   2      			reset = GameStart(map1, 2, 1); //fix valuse to actual variables here
 394   2      		//victory
 395   2      		else if (SW7 == 0)
 396   2      			reset = GameStart(map2, 1, 1);
 397   2      		//victory
 398   2      		else if (SW9 == 0)
 399   2      			reset = GameStart(map3, 10, 2);
 400   2      		//victory
 401   2      	}
 402   1      
 403   1      	return;
 404   1      }
 405          
 406          void clearGame()
 407          {
 408   1      	LED1 = 1;
 409   1      	LED2 = 1;
 410   1      	LED3 = 1;
 411   1      	LED4 = 1;
 412   1      	LED5 = 1;
 413   1      	LED6 = 1;
 414   1      	LED7 = 1;
 415   1      	LED8 = 1;
 416   1      	LED9 = 1;
 417   1      
 418   1      	return;
 419   1      }
 420          
 421          //After pressing the help button
 422          void Help(unsigned char Play_x, unsigned char Play_y, char Map[12][12]) {
 423   1      	char i = 0;	
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 14:03:22 PAGE 8   

 424   1      
 425   1      	if (Map[Play_x][Play_y] == 'U') {
 426   2      		i = 0;
 427   2      		for (i; i < 3; i++) {
 428   3      			LED2 = 0;
 429   3      			delay(10000);
 430   3      			LED2 = 1;
 431   3      			delay(10000);
 432   3      		}
 433   2      	}
 434   1      	else if (Map[Play_x][Play_y] == 'D') {
 435   2      		i = 0;
 436   2      		for (i; i < 3; i++) {
 437   3      			LED8 = 0;
 438   3      			delay(10000);
 439   3      			LED8 = 1;
 440   3      			delay(10000);
 441   3      		}
 442   2      	}
 443   1      	else if (Map[Play_x][Play_y] == 'L') {
 444   2      		i = 0;
 445   2      		for (i; i < 3; i++) {
 446   3      			LED4 = 0;
 447   3      			delay(10000);
 448   3      			LED4 = 1;
 449   3      			delay(10000);
 450   3      		}
 451   2      	}
 452   1      	else if (Map[Play_x][Play_y] == 'R') {
 453   2      		i = 0;
 454   2      		for (i; i < 3; i++) {
 455   3      			LED6 = 0;
 456   3      			delay(10000);
 457   3      			LED6 = 1;
 458   3      			delay(10000);
 459   3      		}
 460   2      	}
 461   1      
 462   1      	Redraw_Map(Play_x, Play_y, Map);
 463   1      
 464   1      }
 465          
 466          //SOUND STUFF
 467          #define SPEAKER
 468          
 469          #define OSC_FREQ 73732800 
 470          #define N_PAUSE 250 
 471          #define delay_t 700 //max delay
 472          #define TEMPO			(OSC_FREQ/204800)		/* Duration of a 64th note */
 473          
 474          #ifdef SPEAKER
 475          #define E3				((OSC_FREQ/4)/164.81)  // P1,P2-allon   	(61)
 476          #define F3				((OSC_FREQ/4)/174.61)  // P1,P0-allon		(60)
 477          #define G3				((OSC_FREQ/4)/196.00)  // P2-allon			(29)
 478          #define Ab3				((OSC_FREQ/4)/207.65)  // P0-allon			(28)
 479          #define A3				((OSC_FREQ/4)/220.00)  // P1,P0-Yel,Amb		(62)
 480          #define Bb3				((OSC_FREQ/4)/233.08)  // P1,P2-Yel,Grn		(49)
 481          #define B3				((OSC_FREQ/4)/246.94)  // P0-Yel,Amb		(30)
 482          #define C4				((OSC_FREQ/4)/261.63)  // P2-Yel,Grn		(17)
 483          #define Db4				((OSC_FREQ/4)/277.18)  // P1,P0-Red,Grn		(46)
 484          #define D4				((OSC_FREQ/4)/293.67)  // P0-Red,Grn		(14)
 485          #define Eb4				((OSC_FREQ/4)/311.13)  // P1,P2-Red,Amb		(43)
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 14:03:22 PAGE 9   

 486          #define E4				((OSC_FREQ/4)/329.63)  // P2-Red,Amb		(11)
 487          #define F4				((OSC_FREQ/4)/349.23)  // P1,P0-Yel,Grn		(48)
 488          #define Gb4				((OSC_FREQ/4)/369.99)  // P1,P0-Amb,Grn		(50)
 489          #define G4				((OSC_FREQ/4)/392.00)  // P0-Amb,Grn		(18)
 490          #define Ab4				((OSC_FREQ/4)/415.30)  // P1,P0-Red,Yel		(44)
 491          #define A4				((OSC_FREQ/4)/440.00)  // P0-Red,Yel		(12)
 492          #define Bb4				((OSC_FREQ/4)/466.16)  // P1,P0-Red,Amb		(42)
 493          #define B4				((OSC_FREQ/4)/493.88)  // P0-Red,Amb		(10)
 494          #define C5				((OSC_FREQ/4)/523.25)  // P0-Yel,Grn		(16)
 495          #define Db5				((OSC_FREQ/4)/554.37)  // P1, P2-Red,Grn	(47)
 496          #define D5				((OSC_FREQ/4)/587.33)  // P2-Red,Grn		(15)
 497          #define Eb5				((OSC_FREQ/4)/622.25)  // P1,P2-Amb,Grn		(51)
 498          #define E5				((OSC_FREQ/4)/659.26)  // P2-Amb,Grn		(19)
 499          #define F5				((OSC_FREQ/4)/698.46)  // P2-Yel,Amb		(31)
 500          #define Gb5				((OSC_FREQ/4)/739.99)  // P1,P2-Yel,Amb		(63)
 501          #define G5				((OSC_FREQ/4)/783.99)  // P2-Red,Yel		(13)
 502          #define Ab5				((OSC_FREQ/4)/830.61)  // P1,P2-Red,Yel 	(45)	
 503          #define A5				((OSC_FREQ/4)/880.00)  // P1,P0-Grn			(38)
 504          #define Bb5				((OSC_FREQ/4)/932.33)  // P1,P0-Yel			(36)
 505          #define B5				((OSC_FREQ/4)/987.77)  // P1,P2-Grn			(39)
 506          #define C6				((OSC_FREQ/4)/1046.5)  // P2-Grn (per_08)	(7)
 507          #define Db6				((OSC_FREQ/4)/1108.7)  // P1,P0-Red			(40)
 508          #define D6				((OSC_FREQ/4)/1174.7)  // P0-Red			(8)
 509          #define Eb6				((OSC_FREQ/4)/1244.5)  // P1,P2-Amb			(41)
 510          #define E6				((OSC_FREQ/4)/1318.5)  // P2-Amb (per_04)	(9)
 511          #define F6				((OSC_FREQ/4)/1396.9)  // P0-Grn			(6)
 512          #define Gb6				((OSC_FREQ/4)/1480.0)  // P1,P2-Yel			(35)
 513          #define G6				((OSC_FREQ/4)/1568.0)  // P2-Yel (per_02)	(3)
 514          #define Ab6				((OSC_FREQ/4)/1661.2)  // P1,P0-Amb			(34)
 515          #define A6				((OSC_FREQ/4)/1760.0)  // P0-Amb			(2)
 516          #define Bb6				((OSC_FREQ/4)/1864.7)  // P1,P2-Red			(33)
 517          #define B6				((OSC_FREQ/4)/1975.5)  // P2-Red (per_01)	(1)
 518          #define C7				((OSC_FREQ/4)/2093.0)  // P0-Yel			(4)
 519          #define D7				((OSC_FREQ/4)/2349.3)  // P1				(32)
 520          #endif
 521          
 522          #ifdef SPEAKER
 523          code int   period[] = { 0, B6, A6, G6, C7, 0, F6, C6, D6, E6, B4, E4, A4, G5, D4, D5, C5,
 524          C4, G4, E5, 0, 0, 0, 0, 0, 0, 0, 0, Ab3, G3, B3, F5, D7,
 525          Bb6, Ab6, Gb6, Bb5, 0, A5, B5, Db6, Eb6, Bb4, Eb4, Ab4, Ab5, Db4, Db5, F4,
 526          Bb3, Gb4, Eb5, 0, 0, 0, 0, 0, 0, 0, 0, F3, E3, A3, Gb5 };
 527          
 528          int* pointer;
 529          
 530          code char  notes[4][20] = {// Victory Fanfare
 531          	11, 11, 11, 11, 17, 14, 11, 14, 11, 31, 48, 31, 48, 45, 0, 0, 0, 0, 0, 0,
 532          	17, 45, 38, 45, 38, 38, 31, 48, 11, 48, 14, 14, 31, 48, 31, 48, 45, 0, 0, 0,
 533          	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 534          	17, 45, 31, 45, 38, 38, 31, 48, 31, 45, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, };
 535          code char  dur[4][20] = {	// Victory Fanfare
 536          	16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 8, 32, 0, 0, 0, 0, 0,
 537          	16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 8, 32, 0, 0, 0, 0, 0,
 538          	16, 16, 16, 16, 16, 8, 8, 16, 16, 16, 8, 8, 16, 16, 16, 16, 32, 0, 0, 0,
 539          	16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 8, 32, 0, 0, 0, 0, 0, };
 540          
 541          /*void clk(void) interrupt 3 using 1
 542          {
 543          	TH1 = -(*pointer) >> 8;
 544          	TL1 = -(*pointer) & 0x0ff;
 545          	SPEAK = ~SPEAK;
 546          }*/
 547          #endif
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 14:03:22 PAGE 10  

 548          
 549          void wallHit(void)
 550          {
 551   1      	/*TR0=1;//sets timer on
 552   1      	pointer = 9;
 553   1      	TF0=0;
 554   1      	Delay250HZ();
 555   1      	
 556   1      	pointer = 61;
 557   1      	TF0=0;
 558   1      	Delay250HZ();
 559   1      	ET0=1;*/
 560   1      	char i = 0;
 561   1      	for (i; i < 20; i++)
 562   1      	{
 563   2      		SPEAK = 0;
 564   2      		Delay250HZ();
 565   2      		SPEAK = ~SPEAK;
 566   2      		Delay250HZ();
 567   2      	}
 568   1      		
 569   1      	return;
 570   1      }
 571          
 572          void Delay250HZ(void)
 573          {
 574   1      	TF0=0;
 575   1      	TL0=0x33;
 576   1      	TH0=0xFB;
 577   1      	TR0=1;
 578   1      	while(TF0 != 1)
 579   1      	{};
 580   1      	TR0=0;
 581   1      	TF0=0;
 582   1      	return;
 583   1      }
 584          
 585          void win(void)
 586          {
 587   1      	char n, d;
 588   1      	unsigned int i,j;
 589   1      	
 590   1      	i=0;
 591   1      	j=0;
 592   1      	
 593   1      	do 
 594   1      	{
 595   2      		n=notes[j][i];  // read next note and duration
 596   2      		d=dur[j][i];
 597   2      		do 
 598   2      		{
 599   3      			finish(n,d);  // use displ routine to play note and light LEDs
 600   3      			i++;
 601   3      			n=notes[j][i];  // repeat until dur=0 (indicates end of row (phrase))
 602   3      			d=dur[j][i];
 603   3      		} while (d!=0);
 604   2      	i=0;
 605   2      	j++;
 606   2      	} while (j < 4);
 607   1      	return;
 608   1      }
 609          
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 14:03:22 PAGE 11  

 610          #ifdef SPEAKER
 611          void finish(char n,char d)
 612          {
 613   1          //ET1=0;
 614   1      	//TR1=0;
 615   1      	int dur_time = 0;
 616   1      	int t = 0;
 617   1      	if (d==0) //boop
 618   1      	{
 619   2      		dur_time=delay_t; // delay_t is a global variable used by simon
 620   2      		t=0;
 621   2      	}
 622   1      	else
 623   1      	{
 624   2      		dur_time=TEMPO*d; // TEMPO defines speed of all songs
 625   2      		t=20;	     	  // t=20 puts a small delay between notes
 626   2      	}
 627   1      
 628   1        	pointer = &period[n];
 629   1      
 630   1          if( *pointer != 0 ) {
 631   2              /* Enable timer */
 632   2              TH1=-(*pointer)>>8;
 633   2              TL1=-(*pointer)&0x0ff;
 634   2              TR1=0;
 635   2              ET1=0;
 636   2          }
 637   1      
 638   1          sdelay(dur_time);
 639   1      
 640   1          /* Disable timer */
 641   1          ET1=1;
 642   1          TR1=1;
 643   1      
 644   1      	if(t!=0) sdelay(t);
 645   1      
 646   1      	return;
 647   1      }
 648          #endif
 649          
 650          void sdelay(int time)
 651          {
 652   1          unsigned int i;
 653   1          while( time > 0 ) {
 654   2              for( i=0 ; i<N_PAUSE ; i++ ) ;
 655   2      		time--;
 656   2          }
 657   1      	return;
 658   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2433    ----
   CONSTANT SIZE    =    865    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      75
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
