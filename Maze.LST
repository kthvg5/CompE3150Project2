C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:00:13 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE MAZE
OBJECT MODULE PLACED IN .\Maze.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\Maze.c DEBUG OBJECTEXTEND

stmt level    source

   1          #include<reg932.h>
   2          #include<stdlib.h>
   3          #include "maps.h"
   4          #include "uart.h"
   5          
   6          sbit LED1 = P2 ^ 4;
   7          sbit LED2 = P0 ^ 5;
   8          sbit LED3 = P2 ^ 7;
   9          sbit LED4 = P0 ^ 6;
  10          sbit LED5 = P1 ^ 6;
  11          sbit LED6 = P0 ^ 4;
  12          sbit LED7 = P2 ^ 5;
  13          sbit LED8 = P0 ^ 7;
  14          sbit LED9 = P2 ^ 6;
  15          
  16          sbit SW1 = P2 ^ 0;
  17          sbit SW2 = P0 ^ 1;
  18          sbit SW3 = P2 ^ 3;
  19          sbit SW4 = P0 ^ 2;
  20          sbit SW5 = P1 ^ 4;
  21          sbit SW6 = P0 ^ 0;
  22          sbit SW7 = P2 ^ 1;
  23          sbit SW8 = P0 ^ 3;
  24          sbit SW9 = P2 ^ 2;
  25          
  26          sbit SPEAK = P1 ^ 7;
  27          
  28          void delay (long x);
  29          void cheatMap(/*const*/ char map_array[12][12], /*const*/ unsigned char arr_x, /*const*/ unsigned char arr
             -_y);
  30          void Redraw_Map(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  31          char Up(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  32          char Down(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  33          char Left(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  34          char Right(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  35          char GameStart(/*const*/ char Map[12][12], /*const*/ unsigned char Start_x, /*const*/ unsigned char Start_
             -y);
  36          void playMenu();
  37          void clearGame();
  38          void wallHit(void);
  39          void Delay250HZ(void);
  40          void win(void);
  41          void finish(char n, char d);
  42          void finish(char n, char d);
  43          void sdelay(int time);
  44          
  45          
  46          //Looping Code for playing the game
  47          void main(void)
  48          {
  49   1      	P0M1 = 0;
  50   1      	P1M1 = 0;
  51   1      	P2M1 = 0;
  52   1      	P3M1 = 0;
  53   1      	TMOD = 0x11;
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:00:13 PAGE 2   

  54   1      
  55   1      	uart_init();
  56   1      	
  57   1      	while (1)
  58   1      	{
  59   2      		playMenu();
  60   2      		clearGame();
  61   2      	}
  62   1      
  63   1      	return;
  64   1      }	
  65          
  66          /*void delay(long x)
  67          {
  68          	long i = 0;
  69          	for (i; i<x; i++);
  70          }*/
  71          
  72          void cheatMap(/*const*/ char map_array[12][12], unsigned char arr_x, unsigned char arr_y) //rename map_arr
             -ay to group code name for the map array
  73          {
  74   1      	unsigned char i;
  75   1      	unsigned char j;
  76   1      	for (i = 0; i < arr_x; i++)
  77   1      	{
  78   2      
  79   2      		for (j = 0; j < arr_y; j++)
  80   2      		{
  81   3      			uart_transmit(map_array[j][i]);
  82   3      		}
  83   2      		uart_transmit('\n');
  84   2      		uart_transmit('\r');//I think this will work?
  85   2      	}
  86   1      	return;
  87   1      }
  88          
  89          void Redraw_Map(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12])
  90          {
  91   1      	unsigned char i = 0;
  92   1      	//Shows what the 8 spaces around the player are
  93   1      	//LED1
  94   1      	if (Map[Play_x - 1][Play_y - 1] == 'W') //Wall
  95   1      		LED1 = 0;
  96   1      	else if (Map[Play_x - 1][Play_y - 1] == 'G')
  97   1      	{
  98   2      		for (i; i < 3; i++)
  99   2      		{
 100   3      			LED1 = 0;
 101   3      			delay(10000);
 102   3      			LED1 = 1;
 103   3      			delay(10000);
 104   3      		}
 105   2      	}
 106   1      	else //Open
 107   1      		LED1 = 1;
 108   1      	//LED2
 109   1      	if (Map[Play_x][Play_y - 1] == 'W') //Wall
 110   1      		LED2 = 0;
 111   1      	else if (Map[Play_x][Play_y - 1] == 'G') //Goal
 112   1      	{
 113   2      		for (i; i < 3; i++)
 114   2      		{
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:00:13 PAGE 3   

 115   3      			LED2 = 0;
 116   3      			delay(10000);
 117   3      			LED2 = 1;
 118   3      			delay(10000);
 119   3      		}
 120   2      	}
 121   1      	else //Open
 122   1      		LED2 = 1;
 123   1      	//LED3
 124   1      	if (Map[Play_x + 1][Play_y - 1] == 'W') //Wall
 125   1      		LED3 = 0;
 126   1      	else if (Map[Play_x + 1][Play_y - 1] == 'G') //Goal
 127   1      	{
 128   2      		for (i; i < 3; i++)
 129   2      		{
 130   3      			LED3 = 0;
 131   3      			delay(10000);
 132   3      			LED3 = 1;
 133   3      			delay(10000);
 134   3      		}
 135   2      	}
 136   1      	else //Open
 137   1      		LED3 = 1;
 138   1      	//LED4
 139   1      	if (Map[Play_x - 1][Play_y] == 'W') //Wall
 140   1      		LED4 = 0;
 141   1      	else if (Map[Play_x - 1][Play_y] == 'G') //Goal
 142   1      	{
 143   2      		for (i; i < 3; i++)
 144   2      		{
 145   3      			LED4 = 0;
 146   3      			delay(10000);
 147   3      			LED4 = 1;
 148   3      			delay(10000);
 149   3      		}
 150   2      	}
 151   1      	else //Open
 152   1      		LED4 = 1;
 153   1      	//LED5
 154   1      	if (Map[Play_x][Play_y] == 'W') //Wall
 155   1      		LED5 = 0;
 156   1      	else if (Map[Play_x][Play_y] == 'G') //Goal
 157   1      	{
 158   2      		for (i; i < 3; i++)
 159   2      		{
 160   3      			LED5 = 0;
 161   3      			delay(10000);
 162   3      			LED5 = 1;
 163   3      			delay(10000);
 164   3      		}
 165   2      	}
 166   1      	else //Open
 167   1      		LED5 = 1;
 168   1      	//LED6
 169   1      	if (Map[Play_x + 1][Play_y] == 'W') //Wall
 170   1      		LED6 = 0;
 171   1      	else if (Map[Play_x + 1][Play_y] == 'G') //Goal
 172   1      	{
 173   2      		for (i; i < 3; i++)
 174   2      		{
 175   3      			LED6 = 0;
 176   3      			delay(10000);
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:00:13 PAGE 4   

 177   3      			LED6 = 1;
 178   3      			delay(10000);
 179   3      		}
 180   2      	}
 181   1      	else //Open
 182   1      		LED6 = 1;
 183   1      	//LED7
 184   1      	if (Map[Play_x - 1][Play_y + 1] == 'W') //Wall
 185   1      		LED7 = 0;
 186   1      	else if (Map[Play_x - 1][Play_y + 1] == 'G') //Goal
 187   1      	{
 188   2      		for (i; i < 3; i++)
 189   2      		{
 190   3      			LED7 = 0;
 191   3      			delay(10000);
 192   3      			LED7 = 1;
 193   3      			delay(10000);
 194   3      		}
 195   2      	}
 196   1      	else //Open
 197   1      		LED7 = 1;
 198   1      	//LED8
 199   1      	if (Map[Play_x][Play_y + 1] == 'W') //Wall
 200   1      		LED8 = 0;
 201   1      	else if (Map[Play_x][Play_y + 1] == 'G') //Goal
 202   1      	{
 203   2      		for (i; i < 3; i++)
 204   2      		{
 205   3      			LED8 = 0;
 206   3      			delay(10000);
 207   3      			LED8 = 1;
 208   3      			delay(10000);
 209   3      		}
 210   2      	}
 211   1      	else //Open
 212   1      		LED8 = 1;
 213   1      	//LED9
 214   1      	if (Map[Play_x + 1][Play_y + 1] == 'W') //Wall
 215   1      		LED9 = 0;
 216   1      	else if (Map[Play_x + 1][Play_y + 1] == 'G') //Goal
 217   1      	{
 218   2      		for (i; i < 3; i++)
 219   2      		{
 220   3      			LED9 = 0;
 221   3      			delay(10000);
 222   3      			LED9 = 1;
 223   3      			delay(10000);
 224   3      		}
 225   2      	}
 226   1      	else //Open
 227   1      		LED9 = 1;
 228   1      
 229   1      	return;
 230   1      }
 231          //Button Actions
 232          //Up button
 233          char Up(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 234   1      	if (Map[Play_x][Play_y - 1] != 'W')
 235   1      		Play_y -= 1;
 236   1      	else
 237   1      		wallHit();
 238   1      	Redraw_Map(Play_x, Play_y, Map);
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:00:13 PAGE 5   

 239   1      	return Play_y;
 240   1      }
 241          
 242          //Down
 243          char Down(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 244   1      	if (Map[Play_x][Play_y + 1] != 'W')
 245   1      		Play_y += 1;
 246   1      	else
 247   1      		wallHit();
 248   1      	Redraw_Map(Play_x, Play_y, Map);
 249   1      	return Play_y;
 250   1      }
 251          
 252          //Right 
 253          char Right(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 254   1      	if (Map[Play_x + 1][Play_y] != 'W')
 255   1      		Play_x += 1;
 256   1      	else
 257   1      		wallHit();
 258   1      	Redraw_Map(Play_x, Play_y, Map);
 259   1      	return Play_x;
 260   1      }
 261          
 262          //Left 
 263          char Left(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 264   1      	if (Map[Play_x - 1][Play_y] != 'W')
 265   1      		Play_x -= 1;
 266   1      	else
 267   1      		wallHit();
 268   1      	Redraw_Map(Play_x, Play_y, Map);
 269   1      	return Play_x;
 270   1      }
 271          //Check if Player is at goal
 272          
 273          char GameStart(/*const*/ char Map[12][12], /*const*/ unsigned char Start_x, /*const*/ unsigned char Start_
             -y) {
 274   1      	unsigned char GameOver = 0; //reset every new game
 275   1      	unsigned char Play_x = Start_x;	//Load starting positions
 276   1      	unsigned char Play_y = Start_y;
 277   1      	unsigned char i = 0;
 278   1      	unsigned char k = 0;
 279   1      
 280   1      	//to transmit a number, use value+48
 281   1      
 282   1      	uart_transmit(Play_x+48);
 283   1      	uart_transmit('\n');
 284   1      	uart_transmit('\r');
 285   1      	uart_transmit(Play_y+48);
 286   1      	uart_transmit('\n');
 287   1      	uart_transmit('\r');
 288   1      
 289   1      	Redraw_Map(Play_x, Play_y, Map);
 290   1      
 291   1      	while (GameOver == 0) 
 292   1      	{ //This loop plays the game until finished
 293   2      		while (SW1 == 0 || SW3 == 0 || SW2 == 0 || SW8 == 0 || SW4 == 0 || SW6 == 0) 
 294   2      		{ //Check if any input
 295   3      			//Nothing to do here
 296   3      		}
 297   2      
 298   2      		delay(10);
 299   2      
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:00:13 PAGE 6   

 300   2      		//waiting for input
 301   2      		if (SW1 == 0) //Exit Button
 302   2      			GameOver = 1;
 303   2      		else if (SW5 == 0) // Help Button
 304   2      			;//Help(Play_x, Play_y, Map[][]);
 305   2      		else if (SW2 == 0)
 306   2      			Play_y = Up(Play_x, Play_y, Map);
 307   2      		else if (SW8 == 0)
 308   2      			Play_y = Down(Play_x, Play_y, Map);
 309   2      		else if (SW4 == 0)
 310   2      			Play_x = Left(Play_x, Play_y, Map);
 311   2      		else if (SW6 == 0)
 312   2      			Play_x = Right(Play_x, Play_y, Map);
 313   2      		else if (SW3 == 0)
 314   2      			cheatMap(Map, 12, 12);
 315   2      		//Check if Game Over
 316   2      		if (Map[Play_x][Play_y] == 'G'){
 317   3      			GameOver = 1;
 318   3      			win();
 319   3      		}
 320   2      			
 321   2      	}
 322   1      	return GameOver;
 323   1      }
 324          
 325          void playMenu()
 326          {
 327   1      	char reset = 0;
 328   1      	
 329   1      	char* title = "Simon's A-MAZE-ing Adventures!";
 330   1      	char* star_bar = "*********************************";
 331   1      	char* menu1 = "Please select difficulty level: \n";
 332   1      	char* menu2 = "1) Easy          2) Medium          3) Hard \n";
 333   1      
 334   1      	unsigned char i = 0;
 335   1      	while (star_bar[i] != '\0')
 336   1      	{
 337   2      		uart_transmit(star_bar[i]);
 338   2      		i++;
 339   2      	}
 340   1      	uart_transmit('\n');
 341   1      	uart_transmit('\r');
 342   1      	i = 0;
 343   1      	while (title[i] != '\0')
 344   1      	{
 345   2      		uart_transmit(title[i]);
 346   2      		i++;
 347   2      	}
 348   1      	uart_transmit('\n');
 349   1      	uart_transmit('\r');
 350   1      	i = 0;
 351   1      	while (star_bar[i] != '\0')
 352   1      	{
 353   2      		uart_transmit(star_bar[i]);
 354   2      		i++;
 355   2      	}
 356   1      	uart_transmit('\n');
 357   1      	uart_transmit('\r');
 358   1      	uart_transmit('\n');
 359   1      	uart_transmit('\r');
 360   1      	i = 0;
 361   1      	while (menu1[i] != '\0')
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:00:13 PAGE 7   

 362   1      	{
 363   2      		uart_transmit(menu1[i]);
 364   2      		i++;
 365   2      	}
 366   1      	uart_transmit('\n');
 367   1      	uart_transmit('\r');
 368   1      	i = 0;
 369   1      	while (menu2[i] != '\0')
 370   1      	{
 371   2      		uart_transmit(menu2[i]);
 372   2      		i++;
 373   2      	}
 374   1      	uart_transmit('\n');
 375   1      	uart_transmit('\r');
 376   1      	i = 0;
 377   1      
 378   1      	while (reset == 0)
 379   1      	{
 380   2      		if (SW3 == 0)
 381   2      			reset = GameStart(map1, 2, 1); //fix valuse to actual variables here
 382   2      		//victory
 383   2      		/*else if (SW7 == 0)
 384   2      			//GameStart(&(&map2[0][0]), M2startX, M2startY);
 385   2      		//victory
 386   2      		else if (SW9 == 0)*/
 387   2      			//GameStart(&(&map3[0][0]), M3startX, M3startY);
 388   2      		//victory
 389   2      	}
 390   1      
 391   1      	return;
 392   1      }
 393          
 394          void clearGame()
 395          {
 396   1      	LED1 = 1;
 397   1      	LED2 = 1;
 398   1      	LED3 = 1;
 399   1      	LED4 = 1;
 400   1      	LED5 = 1;
 401   1      	LED6 = 1;
 402   1      	LED7 = 1;
 403   1      	LED8 = 1;
 404   1      	LED9 = 1;
 405   1      
 406   1      	return;
 407   1      }
 408          
 409          //SOUND STUFF
 410          #define SPEAKER
 411          
 412          #define OSC_FREQ 73732800 
 413          #define N_PAUSE 250 
 414          #define delay_t 700 //max delay
 415          #define TEMPO			(OSC_FREQ/204800)		/* Duration of a 64th note */
 416          
 417          #ifdef SPEAKER
 418          #define E3				((OSC_FREQ/4)/164.81)  // P1,P2-allon   	(61)
 419          #define F3				((OSC_FREQ/4)/174.61)  // P1,P0-allon		(60)
 420          #define G3				((OSC_FREQ/4)/196.00)  // P2-allon			(29)
 421          #define Ab3				((OSC_FREQ/4)/207.65)  // P0-allon			(28)
 422          #define A3				((OSC_FREQ/4)/220.00)  // P1,P0-Yel,Amb		(62)
 423          #define Bb3				((OSC_FREQ/4)/233.08)  // P1,P2-Yel,Grn		(49)
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:00:13 PAGE 8   

 424          #define B3				((OSC_FREQ/4)/246.94)  // P0-Yel,Amb		(30)
 425          #define C4				((OSC_FREQ/4)/261.63)  // P2-Yel,Grn		(17)
 426          #define Db4				((OSC_FREQ/4)/277.18)  // P1,P0-Red,Grn		(46)
 427          #define D4				((OSC_FREQ/4)/293.67)  // P0-Red,Grn		(14)
 428          #define Eb4				((OSC_FREQ/4)/311.13)  // P1,P2-Red,Amb		(43)
 429          #define E4				((OSC_FREQ/4)/329.63)  // P2-Red,Amb		(11)
 430          #define F4				((OSC_FREQ/4)/349.23)  // P1,P0-Yel,Grn		(48)
 431          #define Gb4				((OSC_FREQ/4)/369.99)  // P1,P0-Amb,Grn		(50)
 432          #define G4				((OSC_FREQ/4)/392.00)  // P0-Amb,Grn		(18)
 433          #define Ab4				((OSC_FREQ/4)/415.30)  // P1,P0-Red,Yel		(44)
 434          #define A4				((OSC_FREQ/4)/440.00)  // P0-Red,Yel		(12)
 435          #define Bb4				((OSC_FREQ/4)/466.16)  // P1,P0-Red,Amb		(42)
 436          #define B4				((OSC_FREQ/4)/493.88)  // P0-Red,Amb		(10)
 437          #define C5				((OSC_FREQ/4)/523.25)  // P0-Yel,Grn		(16)
 438          #define Db5				((OSC_FREQ/4)/554.37)  // P1, P2-Red,Grn	(47)
 439          #define D5				((OSC_FREQ/4)/587.33)  // P2-Red,Grn		(15)
 440          #define Eb5				((OSC_FREQ/4)/622.25)  // P1,P2-Amb,Grn		(51)
 441          #define E5				((OSC_FREQ/4)/659.26)  // P2-Amb,Grn		(19)
 442          #define F5				((OSC_FREQ/4)/698.46)  // P2-Yel,Amb		(31)
 443          #define Gb5				((OSC_FREQ/4)/739.99)  // P1,P2-Yel,Amb		(63)
 444          #define G5				((OSC_FREQ/4)/783.99)  // P2-Red,Yel		(13)
 445          #define Ab5				((OSC_FREQ/4)/830.61)  // P1,P2-Red,Yel 	(45)	
 446          #define A5				((OSC_FREQ/4)/880.00)  // P1,P0-Grn			(38)
 447          #define Bb5				((OSC_FREQ/4)/932.33)  // P1,P0-Yel			(36)
 448          #define B5				((OSC_FREQ/4)/987.77)  // P1,P2-Grn			(39)
 449          #define C6				((OSC_FREQ/4)/1046.5)  // P2-Grn (per_08)	(7)
 450          #define Db6				((OSC_FREQ/4)/1108.7)  // P1,P0-Red			(40)
 451          #define D6				((OSC_FREQ/4)/1174.7)  // P0-Red			(8)
 452          #define Eb6				((OSC_FREQ/4)/1244.5)  // P1,P2-Amb			(41)
 453          #define E6				((OSC_FREQ/4)/1318.5)  // P2-Amb (per_04)	(9)
 454          #define F6				((OSC_FREQ/4)/1396.9)  // P0-Grn			(6)
 455          #define Gb6				((OSC_FREQ/4)/1480.0)  // P1,P2-Yel			(35)
 456          #define G6				((OSC_FREQ/4)/1568.0)  // P2-Yel (per_02)	(3)
 457          #define Ab6				((OSC_FREQ/4)/1661.2)  // P1,P0-Amb			(34)
 458          #define A6				((OSC_FREQ/4)/1760.0)  // P0-Amb			(2)
 459          #define Bb6				((OSC_FREQ/4)/1864.7)  // P1,P2-Red			(33)
 460          #define B6				((OSC_FREQ/4)/1975.5)  // P2-Red (per_01)	(1)
 461          #define C7				((OSC_FREQ/4)/2093.0)  // P0-Yel			(4)
 462          #define D7				((OSC_FREQ/4)/2349.3)  // P1				(32)
 463          #endif
 464          
 465          #ifdef SPEAKER
 466          code int   period[] = { 0, B6, A6, G6, C7, 0, F6, C6, D6, E6, B4, E4, A4, G5, D4, D5, C5,
 467          C4, G4, E5, 0, 0, 0, 0, 0, 0, 0, 0, Ab3, G3, B3, F5, D7,
 468          Bb6, Ab6, Gb6, Bb5, 0, A5, B5, Db6, Eb6, Bb4, Eb4, Ab4, Ab5, Db4, Db5, F4,
 469          Bb3, Gb4, Eb5, 0, 0, 0, 0, 0, 0, 0, 0, F3, E3, A3, Gb5 };
 470          
 471          int* pointer;
 472          
 473          code char  notes[4][20] = {// Victory Fanfare
 474          	11, 11, 11, 11, 17, 14, 11, 14, 11, 31, 48, 31, 48, 45, 0, 0, 0, 0, 0, 0,
 475          	17, 45, 38, 45, 38, 38, 31, 48, 11, 48, 14, 14, 31, 48, 31, 48, 45, 0, 0, 0,
 476          	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 477          	17, 45, 31, 45, 38, 38, 31, 48, 31, 45, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, };
 478          code char  dur[4][20] = {	// Victory Fanfare
 479          	16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 8, 32, 0, 0, 0, 0, 0,
 480          	16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 8, 32, 0, 0, 0, 0, 0,
 481          	16, 16, 16, 16, 16, 8, 8, 16, 16, 16, 8, 8, 16, 16, 16, 16, 32, 0, 0, 0,
 482          	16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 8, 32, 0, 0, 0, 0, 0, };
 483          
 484          void clk(void) interrupt 3 using 1
 485          {
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:00:13 PAGE 9   

 486   1      	TH1 = -(*pointer) >> 8;
 487   1      	TL1 = -(*pointer) & 0x0ff;
 488   1      	SPEAK = ~SPEAK;
 489   1      }
 490          #endif
 491          
 492          void wallHit(void)
 493          {
 494   1      	ET0=0;//sets timer on
 495   1      	pointer = 9;
*** WARNING C196 IN LINE 495 OF .\MAZE.C: mspace probably invalid
 496   1      	TF0=0;
 497   1      	Delay250HZ();
 498   1      	
 499   1      	pointer = 61;
*** WARNING C196 IN LINE 499 OF .\MAZE.C: mspace probably invalid
 500   1      	TF0=0;
 501   1      	Delay250HZ();
 502   1      	ET0=1;
 503   1      	return;
 504   1      }
 505          
 506          void Delay250HZ(void)
 507          {
 508   1      	SPEAK=0;
 509   1      	TF0=0;
 510   1      	TL0=0x33;
 511   1      	TH0=0xFB;
 512   1      	TR0=1;
 513   1      	while(TF0 != 1)
 514   1      	{};
 515   1      	TR0=0;
 516   1      	TF0=0;
 517   1      	SPEAK=1;
 518   1      	return;
 519   1      }
 520          
 521          void win(void)
 522          {
 523   1      	char n, d;
 524   1      	unsigned int i,j;
 525   1      	
 526   1      	i=0;
 527   1      	j=0;
 528   1      	
 529   1      	do 
 530   1      	{
 531   2      		n=notes[j][i];  // read next note and duration
 532   2      		d=dur[j][i];
 533   2      		do 
 534   2      		{
 535   3      			finish(n,d);  // use displ routine to play note and light LEDs
 536   3      			i++;
 537   3      			n=notes[j][i];  // repeat until dur=0 (indicates end of row (phrase))
 538   3      			d=dur[j][i];
 539   3      		} while (d!=0);
 540   2      	i=0;
 541   2      	j++;
 542   2      	} while (j < 4);
 543   1      	return;
 544   1      }
 545          
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:00:13 PAGE 10  

 546          #ifdef SPEAKER
 547          void finish(char n,char d)
 548          {
 549   1          //ET1=0;
 550   1      	//TR1=0;
 551   1      	int dur_time;
 552   1      	int t;
 553   1      	if (d==0) //boop
 554   1      	{
 555   2      		dur_time=delay_t; // delay_t is a global variable used by simon
 556   2      		t=0;
 557   2      	}
 558   1      	else
 559   1      	{
 560   2      		dur_time=TEMPO*d; // TEMPO defines speed of all songs
 561   2      		t=20;	     	  // t=20 puts a small delay between notes
 562   2      	}
 563   1      
 564   1        	pointer = &period[n];
 565   1      
 566   1          if( *pointer != 0 ) {
 567   2              /* Enable timer */
 568   2              TH1=-(*pointer)>>8;
 569   2              TL1=-(*pointer)&0x0ff;
 570   2              TR1=0;
 571   2              ET1=0;
 572   2          }
 573   1      
 574   1          sdelay(dur_time);
 575   1      
 576   1          /* Disable timer */
 577   1          ET1=1;
 578   1          TR1=1;
 579   1      
 580   1      	if(t!=0) sdelay(t);
 581   1      
 582   1      	return;
 583   1      }
 584          #endif
 585          
 586          void sdelay(int time )
 587          {
 588   1          unsigned int i;
 589   1      
 590   1          while( time-- > 0 ) {
 591   2              for( i=0 ; i<N_PAUSE ; i++ ) ;
 592   2          }
 593   1      	return;
 594   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2112    ----
   CONSTANT SIZE    =    865    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      68
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
