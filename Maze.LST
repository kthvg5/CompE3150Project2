C51 COMPILER V6.02  MAZE                                                                   05/12/2016 11:22:12 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE MAZE
OBJECT MODULE PLACED IN .\Maze.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\Maze.c DEBUG OBJECTEXTEND

stmt level    source

   1          #include<reg932.h>
   2          #include<stdlib.h>
   3          #include "maps.h"
   4          #include "uart.h"
   5          
   6          
   7          sbit LED1 = P2 ^ 4;
   8          sbit LED2 = P0 ^ 5;
   9          sbit LED3 = P2 ^ 7;
  10          sbit LED4 = P0 ^ 6;
  11          sbit LED5 = P1 ^ 6;
  12          sbit LED6 = P0 ^ 4;
  13          sbit LED7 = P2 ^ 5;
  14          sbit LED8 = P0 ^ 7;
  15          sbit LED9 = P2 ^ 6;
  16          
  17          sbit SW1 = P2 ^ 0;
  18          sbit SW2 = P0 ^ 1;
  19          sbit SW3 = P2 ^ 3;
  20          sbit SW4 = P0 ^ 2;
  21          sbit SW5 = P1 ^ 4;
  22          sbit SW6 = P0 ^ 0;
  23          sbit SW7 = P2 ^ 1;
  24          sbit SW8 = P0 ^ 3;
  25          sbit SW9 = P2 ^ 2;
  26          
  27          void delay (long x);
  28          void cheatMap(/*const*/ char map_array[7][7], /*const*/ unsigned char arr_x, /*const*/ unsigned char arr_y
             -);
  29          void Redraw_Map(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]);
  30          char Up(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]);
  31          char Down(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]);
  32          char Left(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]);
  33          char Right(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]);
  34          char GameStart(/*const*/ char Map[7][7], /*const*/ unsigned char Start_x, /*const*/ unsigned char Start_y)
             -;
  35          void playMenu();
  36          void clearGame();
  37          
  38          //Looping Code for playing the game
  39          void main(void)
  40          {
  41   1      	P0M1 = 0;
  42   1      	P1M1 = 0;
  43   1      	P2M1 = 0;
  44   1      	P3M1 = 0;
  45   1      
  46   1      	uart_init();
  47   1      	
  48   1      	while (1)
  49   1      	{
  50   2      		playMenu();
  51   2      		clearGame();
  52   2      	}
  53   1      
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 11:22:12 PAGE 2   

  54   1      	return;
  55   1      }	
  56          
  57          /*void delay(long x)
  58          {
  59          	long i = 0;
  60          	for (i; i<x; i++);
  61          }*/
  62          
  63          void cheatMap(/*const*/ char map_array[7][7], unsigned char arr_x, unsigned char arr_y) //rename map_array
             - to group code name for the map array
  64          {
  65   1      	unsigned char i;
  66   1      	unsigned char j;
  67   1      	for (i = 0; i < arr_x; i++)
  68   1      	{
  69   2      
  70   2      		for (j = 0; j < arr_y; j++)
  71   2      		{
  72   3      			uart_transmit(map_array[j][i]);
  73   3      		}
  74   2      		uart_transmit('\n');
  75   2      		uart_transmit('\r');//I think this will work?
  76   2      	}
  77   1      	return;
  78   1      }
  79          
  80          void Redraw_Map(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7])
  81          {
  82   1      	unsigned char i = 0;
  83   1      	//Shows what the 8 spaces around the player are
  84   1      	//LED1
  85   1      	if (Map[Play_x - 1][Play_y - 1] == 'W') //Wall
  86   1      		LED1 = 0;
  87   1      	else if (Map[Play_x - 1][Play_y - 1] == 'G')
  88   1      	{
  89   2      		for (i; i < 3; i++)
  90   2      		{
  91   3      			LED1 = 0;
  92   3      			delay(10000);
  93   3      			LED1 = 1;
  94   3      			delay(10000);
  95   3      		}
  96   2      	}
  97   1      	else //Open
  98   1      		LED1 = 1;
  99   1      	//LED2
 100   1      	if (Map[Play_x][Play_y - 1] == 'W') //Wall
 101   1      		LED2 = 0;
 102   1      	else if (Map[Play_x][Play_y - 1] == 'G') //Goal
 103   1      	{
 104   2      		for (i; i < 3; i++)
 105   2      		{
 106   3      			LED2 = 0;
 107   3      			delay(10000);
 108   3      			LED2 = 1;
 109   3      			delay(10000);
 110   3      		}
 111   2      	}
 112   1      	else //Open
 113   1      		LED2 = 1;
 114   1      	//LED3
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 11:22:12 PAGE 3   

 115   1      	if (Map[Play_x + 1][Play_y - 1] == 'W') //Wall
 116   1      		LED3 = 0;
 117   1      	else if (Map[Play_x + 1][Play_y - 1] == 'G') //Goal
 118   1      	{
 119   2      		for (i; i < 3; i++)
 120   2      		{
 121   3      			LED3 = 0;
 122   3      			delay(10000);
 123   3      			LED3 = 1;
 124   3      			delay(10000);
 125   3      		}
 126   2      	}
 127   1      	else //Open
 128   1      		LED3 = 1;
 129   1      	//LED4
 130   1      	if (Map[Play_x - 1][Play_y] == 'W') //Wall
 131   1      		LED4 = 0;
 132   1      	else if (Map[Play_x - 1][Play_y] == 'G') //Goal
 133   1      	{
 134   2      		for (i; i < 3; i++)
 135   2      		{
 136   3      			LED4 = 0;
 137   3      			delay(10000);
 138   3      			LED4 = 1;
 139   3      			delay(10000);
 140   3      		}
 141   2      	}
 142   1      	else //Open
 143   1      		LED4 = 1;
 144   1      	//LED5
 145   1      	if (Map[Play_x][Play_y] == 'W') //Wall
 146   1      		LED5 = 0;
 147   1      	else if (Map[Play_x][Play_y] == 'G') //Goal
 148   1      	{
 149   2      		for (i; i < 3; i++)
 150   2      		{
 151   3      			LED5 = 0;
 152   3      			delay(10000);
 153   3      			LED5 = 1;
 154   3      			delay(10000);
 155   3      		}
 156   2      	}
 157   1      	else //Open
 158   1      		LED5 = 1;
 159   1      	//LED6
 160   1      	if (Map[Play_x + 1][Play_y] == 'W') //Wall
 161   1      		LED6 = 0;
 162   1      	else if (Map[Play_x + 1][Play_y] == 'G') //Goal
 163   1      	{
 164   2      		for (i; i < 3; i++)
 165   2      		{
 166   3      			LED6 = 0;
 167   3      			delay(10000);
 168   3      			LED6 = 1;
 169   3      			delay(10000);
 170   3      		}
 171   2      	}
 172   1      	else //Open
 173   1      		LED6 = 1;
 174   1      	//LED7
 175   1      	if (Map[Play_x - 1][Play_y + 1] == 'W') //Wall
 176   1      		LED7 = 0;
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 11:22:12 PAGE 4   

 177   1      	else if (Map[Play_x - 1][Play_y + 1] == 'G') //Goal
 178   1      	{
 179   2      		for (i; i < 3; i++)
 180   2      		{
 181   3      			LED7 = 0;
 182   3      			delay(10000);
 183   3      			LED7 = 1;
 184   3      			delay(10000);
 185   3      		}
 186   2      	}
 187   1      	else //Open
 188   1      		LED7 = 1;
 189   1      	//LED8
 190   1      	if (Map[Play_x][Play_y + 1] == 'W') //Wall
 191   1      		LED8 = 0;
 192   1      	else if (Map[Play_x][Play_y + 1] == 'G') //Goal
 193   1      	{
 194   2      		for (i; i < 3; i++)
 195   2      		{
 196   3      			LED8 = 0;
 197   3      			delay(10000);
 198   3      			LED8 = 1;
 199   3      			delay(10000);
 200   3      		}
 201   2      	}
 202   1      	else //Open
 203   1      		LED8 = 1;
 204   1      	//LED9
 205   1      	if (Map[Play_x + 1][Play_y + 1] == 'W') //Wall
 206   1      		LED9 = 0;
 207   1      	else if (Map[Play_x + 1][Play_y + 1] == 'G') //Goal
 208   1      	{
 209   2      		for (i; i < 3; i++)
 210   2      		{
 211   3      			LED9 = 0;
 212   3      			delay(10000);
 213   3      			LED9 = 1;
 214   3      			delay(10000);
 215   3      		}
 216   2      	}
 217   1      	else //Open
 218   1      		LED9 = 1;
 219   1      
 220   1      	return;
 221   1      }
 222          //Button Actions
 223          //Up button
 224          char Up(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]) {
 225   1      	if (Map[Play_x][Play_y - 1] != 'W')
 226   1      		Play_y -= 1;
 227   1      	Redraw_Map(Play_x, Play_y, Map);
 228   1      	return Play_y;
 229   1      }
 230          
 231          //Down
 232          char Down(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]) {
 233   1      	if (Map[Play_x][Play_y + 1] != 'W')
 234   1      		Play_y += 1;
 235   1      	Redraw_Map(Play_x, Play_y, Map);
 236   1      	return Play_y;
 237   1      }
 238          
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 11:22:12 PAGE 5   

 239          //Right 
 240          char Right(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]) {
 241   1      	if (Map[Play_x + 1][Play_y] != 'W')
 242   1      		Play_x += 1;
 243   1      	Redraw_Map(Play_x, Play_y, Map);
 244   1      	return Play_x;
 245   1      }
 246          
 247          //Left 
 248          char Left(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]) {
 249   1      	if (Map[Play_x - 1][Play_y] != 'W')
 250   1      		Play_x -= 1;
 251   1      	Redraw_Map(Play_x, Play_y, Map);
 252   1      	return Play_x;
 253   1      }
 254          //Check if Player is at goal
 255          
 256          char GameStart(/*const*/ char Map[7][7], /*const*/ unsigned char Start_x, /*const*/ unsigned char Start_y)
             - {
 257   1      	unsigned char GameOver = 0; //reset every new game
 258   1      	unsigned char Play_x = Start_x;	//Load starting positions
 259   1      	unsigned char Play_y = Start_y;
 260   1      	unsigned char i = 0;
 261   1      	unsigned char k = 0;
 262   1      
 263   1      	//to transmit a number, use value+48
 264   1      
 265   1      	uart_transmit(Play_x+48);
 266   1      	uart_transmit('\n');
 267   1      	uart_transmit('\r');
 268   1      	uart_transmit(Play_y+48);
 269   1      	uart_transmit('\n');
 270   1      	uart_transmit('\r');
 271   1      
 272   1      	Redraw_Map(Play_x, Play_y, Map);
 273   1      
 274   1      	while (GameOver == 0) 
 275   1      	{ //This loop plays the game until finished
 276   2      		while (SW1 == 0 || SW3 == 0 || SW2 == 0 || SW8 == 0 || SW4 == 0 || SW6 == 0) 
 277   2      		{ //Check if any input
 278   3      			//Nothing to do here
 279   3      		}
 280   2      
 281   2      		delay(10);
 282   2      
 283   2      		//waiting for input
 284   2      		if (SW1 == 0) //Exit Button
 285   2      			GameOver = 1;
 286   2      		else if (SW5 == 0) // Help Button
 287   2      			;//Help(Play_x, Play_y, Map[][]);
 288   2      		else if (SW2 == 0)
 289   2      			Play_y = Up(Play_x, Play_y, Map);
 290   2      		else if (SW8 == 0)
 291   2      			Play_y = Down(Play_x, Play_y, Map);
 292   2      		else if (SW4 == 0)
 293   2      			Play_x = Left(Play_x, Play_y, Map);
 294   2      		else if (SW6 == 0)
 295   2      			Play_x = Right(Play_x, Play_y, Map);
 296   2      		else if (SW3 == 0)
 297   2      			cheatMap(Map, 7, 7);
 298   2      		//Check if Game Over
 299   2      		if (Map[Play_x][Play_y] == 'G')
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 11:22:12 PAGE 6   

 300   2      			GameOver = 1;
 301   2      	}
 302   1      	return GameOver;
 303   1      }
 304          
 305          void playMenu()
 306          {
 307   1      	char reset = 0;
 308   1      	
 309   1      	char* title = "Simon's A-MAZE-ing Adventures!";
 310   1      	char* star_bar = "*********************************";
 311   1      	char* menu1 = "Please select difficulty level: \n";
 312   1      	char* menu2 = "1) Easy          2) Medium          3) Hard \n";
 313   1      
 314   1      	unsigned char i = 0;
 315   1      	while (star_bar[i] != '\0')
 316   1      	{
 317   2      		uart_transmit(star_bar[i]);
 318   2      		i++;
 319   2      	}
 320   1      	uart_transmit('\n');
 321   1      	uart_transmit('\r');
 322   1      	i = 0;
 323   1      	while (title[i] != '\0')
 324   1      	{
 325   2      		uart_transmit(title[i]);
 326   2      		i++;
 327   2      	}
 328   1      	uart_transmit('\n');
 329   1      	uart_transmit('\r');
 330   1      	i = 0;
 331   1      	while (star_bar[i] != '\0')
 332   1      	{
 333   2      		uart_transmit(star_bar[i]);
 334   2      		i++;
 335   2      	}
 336   1      	uart_transmit('\n');
 337   1      	uart_transmit('\r');
 338   1      	uart_transmit('\n');
 339   1      	uart_transmit('\r');
 340   1      	i = 0;
 341   1      	while (menu1[i] != '\0')
 342   1      	{
 343   2      		uart_transmit(menu1[i]);
 344   2      		i++;
 345   2      	}
 346   1      	uart_transmit('\n');
 347   1      	uart_transmit('\r');
 348   1      	i = 0;
 349   1      	while (menu2[i] != '\0')
 350   1      	{
 351   2      		uart_transmit(menu2[i]);
 352   2      		i++;
 353   2      	}
 354   1      	uart_transmit('\n');
 355   1      	uart_transmit('\r');
 356   1      	i = 0;
 357   1      
 358   1      	while (reset == 0)
 359   1      	{
 360   2      		if (SW3 == 0)
 361   2      			reset = GameStart(map1, 2, 1); //fix valuse to actual variables here
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 11:22:12 PAGE 7   

 362   2      		//victory
 363   2      		/*else if (SW7 == 0)
 364   2      			//GameStart(&(&map2[0][0]), M2startX, M2startY);
 365   2      		//victory
 366   2      		else if (SW9 == 0)*/
 367   2      			//GameStart(&(&map3[0][0]), M3startX, M3startY);
 368   2      		//victory
 369   2      	}
 370   1      
 371   1      	return;
 372   1      }
 373          
 374          void clearGame()
 375          {
 376   1      	LED1 = 1;
 377   1      	LED2 = 1;
 378   1      	LED3 = 1;
 379   1      	LED4 = 1;
 380   1      	LED5 = 1;
 381   1      	LED6 = 1;
 382   1      	LED7 = 1;
 383   1      	LED8 = 1;
 384   1      	LED9 = 1;
 385   1      
 386   1      	return;
 387   1      }
 388          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1630    ----
   CONSTANT SIZE    =    387    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      57
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
