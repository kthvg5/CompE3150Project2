C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:21:30 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE MAZE
OBJECT MODULE PLACED IN .\Maze.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\Maze.c DEBUG OBJECTEXTEND

stmt level    source

   1          #include<reg932.h>
   2          #include<stdlib.h>
   3          #include "maps.h"
   4          #include "uart.h"
   5          
   6          sbit LED1 = P2 ^ 4;
   7          sbit LED2 = P0 ^ 5;
   8          sbit LED3 = P2 ^ 7;
   9          sbit LED4 = P0 ^ 6;
  10          sbit LED5 = P1 ^ 6;
  11          sbit LED6 = P0 ^ 4;
  12          sbit LED7 = P2 ^ 5;
  13          sbit LED8 = P0 ^ 7;
  14          sbit LED9 = P2 ^ 6;
  15          
  16          sbit SW1 = P2 ^ 0;
  17          sbit SW2 = P0 ^ 1;
  18          sbit SW3 = P2 ^ 3;
  19          sbit SW4 = P0 ^ 2;
  20          sbit SW5 = P1 ^ 4;
  21          sbit SW6 = P0 ^ 0;
  22          sbit SW7 = P2 ^ 1;
  23          sbit SW8 = P0 ^ 3;
  24          sbit SW9 = P2 ^ 2;
  25          
  26          sbit SPEAK = P1 ^ 7;
  27          
  28          void delay (long x);
  29          void cheatMap(/*const*/ char map_array[12][12], /*const*/ unsigned char arr_x, /*const*/ unsigned char arr
             -_y);
  30          void Redraw_Map(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  31          char Up(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  32          char Down(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  33          char Left(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  34          char Right(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]);
  35          char GameStart(/*const*/ char Map[12][12], /*const*/ unsigned char Start_x, /*const*/ unsigned char Start_
             -y);
  36          void playMenu();
  37          void clearGame();
  38          void wallHit(void);
  39          void Delay250HZ(void);
  40          void win(void);
  41          void finish(char n, char d);
  42          void finish(char n, char d);
  43          void sdelay(int time);
  44          void Help(unsigned char Play_x, unsigned char Play_y, char Map[12][12]);
  45          
  46          
  47          //Looping Code for playing the game
  48          void main(void)
  49          {
  50   1      	P0M1 = 0;
  51   1      	P1M1 = 0;
  52   1      	P2M1 = 0;
  53   1      	P3M1 = 0;
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:21:30 PAGE 2   

  54   1      	TMOD = 0x11;
  55   1      	EA = 1;
  56   1      
  57   1      	uart_init();
  58   1      	
  59   1      	while (1)
  60   1      	{
  61   2      		playMenu();
  62   2      		clearGame();
  63   2      	}
  64   1      
  65   1      	return;
  66   1      }	
  67          
  68          /*void delay(long x)
  69          {
  70          	long i = 0;
  71          	for (i; i<x; i++);
  72          }*/
  73          
  74          void cheatMap(/*const*/ char map_array[12][12], unsigned char arr_x, unsigned char arr_y) //rename map_arr
             -ay to group code name for the map array
  75          {
  76   1      	unsigned char i;
  77   1      	unsigned char j;
  78   1      	for (i = 0; i < arr_x; i++)
  79   1      	{
  80   2      
  81   2      		for (j = 0; j < arr_y; j++)
  82   2      		{
  83   3      			uart_transmit(map_array[j][i]);
  84   3      		}
  85   2      		uart_transmit('\n');
  86   2      		uart_transmit('\r');//I think this will work?
  87   2      	}
  88   1      	return;
  89   1      }
  90          
  91          void Redraw_Map(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12])
  92          {
  93   1      	unsigned char i = 0;
  94   1      	//Shows what the 8 spaces around the player are
  95   1      	//LED1
  96   1      	if (Map[Play_x - 1][Play_y - 1] == 'W') //Wall
  97   1      		LED1 = 0;
  98   1      	else if (Map[Play_x - 1][Play_y - 1] == 'G')
  99   1      	{
 100   2      		for (i; i < 3; i++)
 101   2      		{
 102   3      			LED1 = 0;
 103   3      			delay(10000);
 104   3      			LED1 = 1;
 105   3      			delay(10000);
 106   3      		}
 107   2      	}
 108   1      	else //Open
 109   1      		LED1 = 1;
 110   1      	//LED2
 111   1      	if (Map[Play_x][Play_y - 1] == 'W') //Wall
 112   1      		LED2 = 0;
 113   1      	else if (Map[Play_x][Play_y - 1] == 'G') //Goal
 114   1      	{
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:21:30 PAGE 3   

 115   2      		for (i; i < 3; i++)
 116   2      		{
 117   3      			LED2 = 0;
 118   3      			delay(10000);
 119   3      			LED2 = 1;
 120   3      			delay(10000);
 121   3      		}
 122   2      	}
 123   1      	else //Open
 124   1      		LED2 = 1;
 125   1      	//LED3
 126   1      	if (Map[Play_x + 1][Play_y - 1] == 'W') //Wall
 127   1      		LED3 = 0;
 128   1      	else if (Map[Play_x + 1][Play_y - 1] == 'G') //Goal
 129   1      	{
 130   2      		for (i; i < 3; i++)
 131   2      		{
 132   3      			LED3 = 0;
 133   3      			delay(10000);
 134   3      			LED3 = 1;
 135   3      			delay(10000);
 136   3      		}
 137   2      	}
 138   1      	else //Open
 139   1      		LED3 = 1;
 140   1      	//LED4
 141   1      	if (Map[Play_x - 1][Play_y] == 'W') //Wall
 142   1      		LED4 = 0;
 143   1      	else if (Map[Play_x - 1][Play_y] == 'G') //Goal
 144   1      	{
 145   2      		for (i; i < 3; i++)
 146   2      		{
 147   3      			LED4 = 0;
 148   3      			delay(10000);
 149   3      			LED4 = 1;
 150   3      			delay(10000);
 151   3      		}
 152   2      	}
 153   1      	else //Open
 154   1      		LED4 = 1;
 155   1      	//LED5
 156   1      	if (Map[Play_x][Play_y] == 'W') //Wall
 157   1      		LED5 = 0;
 158   1      	else if (Map[Play_x][Play_y] == 'G') //Goal
 159   1      	{
 160   2      		for (i; i < 3; i++)
 161   2      		{
 162   3      			LED5 = 0;
 163   3      			delay(10000);
 164   3      			LED5 = 1;
 165   3      			delay(10000);
 166   3      		}
 167   2      	}
 168   1      	else //Open
 169   1      		LED5 = 1;
 170   1      	//LED6
 171   1      	if (Map[Play_x + 1][Play_y] == 'W') //Wall
 172   1      		LED6 = 0;
 173   1      	else if (Map[Play_x + 1][Play_y] == 'G') //Goal
 174   1      	{
 175   2      		for (i; i < 3; i++)
 176   2      		{
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:21:30 PAGE 4   

 177   3      			LED6 = 0;
 178   3      			delay(10000);
 179   3      			LED6 = 1;
 180   3      			delay(10000);
 181   3      		}
 182   2      	}
 183   1      	else //Open
 184   1      		LED6 = 1;
 185   1      	//LED7
 186   1      	if (Map[Play_x - 1][Play_y + 1] == 'W') //Wall
 187   1      		LED7 = 0;
 188   1      	else if (Map[Play_x - 1][Play_y + 1] == 'G') //Goal
 189   1      	{
 190   2      		for (i; i < 3; i++)
 191   2      		{
 192   3      			LED7 = 0;
 193   3      			delay(10000);
 194   3      			LED7 = 1;
 195   3      			delay(10000);
 196   3      		}
 197   2      	}
 198   1      	else //Open
 199   1      		LED7 = 1;
 200   1      	//LED8
 201   1      	if (Map[Play_x][Play_y + 1] == 'W') //Wall
 202   1      		LED8 = 0;
 203   1      	else if (Map[Play_x][Play_y + 1] == 'G') //Goal
 204   1      	{
 205   2      		for (i; i < 3; i++)
 206   2      		{
 207   3      			LED8 = 0;
 208   3      			delay(10000);
 209   3      			LED8 = 1;
 210   3      			delay(10000);
 211   3      		}
 212   2      	}
 213   1      	else //Open
 214   1      		LED8 = 1;
 215   1      	//LED9
 216   1      	if (Map[Play_x + 1][Play_y + 1] == 'W') //Wall
 217   1      		LED9 = 0;
 218   1      	else if (Map[Play_x + 1][Play_y + 1] == 'G') //Goal
 219   1      	{
 220   2      		for (i; i < 3; i++)
 221   2      		{
 222   3      			LED9 = 0;
 223   3      			delay(10000);
 224   3      			LED9 = 1;
 225   3      			delay(10000);
 226   3      		}
 227   2      	}
 228   1      	else //Open
 229   1      		LED9 = 1;
 230   1      
 231   1      	return;
 232   1      }
 233          //Button Actions
 234          //Up button
 235          char Up(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 236   1      	if (Map[Play_x][Play_y - 1] != 'W')
 237   1      		Play_y -= 1;
 238   1      	else
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:21:30 PAGE 5   

 239   1      		wallHit();
 240   1      	Redraw_Map(Play_x, Play_y, Map);
 241   1      	return Play_y;
 242   1      }
 243          
 244          //Down
 245          char Down(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 246   1      	if (Map[Play_x][Play_y + 1] != 'W')
 247   1      		Play_y += 1;
 248   1      	else
 249   1      		wallHit();
 250   1      	Redraw_Map(Play_x, Play_y, Map);
 251   1      	return Play_y;
 252   1      }
 253          
 254          //Right 
 255          char Right(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 256   1      	if (Map[Play_x + 1][Play_y] != 'W')
 257   1      		Play_x += 1;
 258   1      	else
 259   1      		wallHit();
 260   1      	Redraw_Map(Play_x, Play_y, Map);
 261   1      	return Play_x;
 262   1      }
 263          
 264          //Left 
 265          char Left(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[12][12]) {
 266   1      	if (Map[Play_x - 1][Play_y] != 'W')
 267   1      		Play_x -= 1;
 268   1      	else
 269   1      		wallHit();
 270   1      	Redraw_Map(Play_x, Play_y, Map);
 271   1      	return Play_x;
 272   1      }
 273          //Check if Player is at goal
 274          
 275          char GameStart(/*const*/ char Map[12][12], /*const*/ unsigned char Start_x, /*const*/ unsigned char Start_
             -y) {
 276   1      	unsigned char GameOver = 0; //reset every new game
 277   1      	unsigned char Play_x = Start_x;	//Load starting positions
 278   1      	unsigned char Play_y = Start_y;
 279   1      	unsigned char i = 0;
 280   1      	unsigned char k = 0;
 281   1      
 282   1      	//to transmit a number, use value+48
 283   1      
 284   1      	Redraw_Map(Play_x, Play_y, Map);
 285   1      
 286   1      	while (GameOver == 0) 
 287   1      	{ //This loop plays the game until finished
 288   2      		while (SW1 == 0 || SW3 == 0 || SW2 == 0 || SW8 == 0 || SW4 == 0 || SW6 == 0) 
 289   2      		{ //Check if any input
 290   3      			//Nothing to do here
 291   3      		}
 292   2      
 293   2      		delay(10);
 294   2      
 295   2      		//waiting for input
 296   2      		if (SW1 == 0) //Exit Button
 297   2      			GameOver = 1;
 298   2      		else if (SW5 == 0) // Help Button
 299   2      			Help(Play_x, Play_y, Map);
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:21:30 PAGE 6   

 300   2      		else if (SW2 == 0)
 301   2      			Play_y = Up(Play_x, Play_y, Map);
 302   2      		else if (SW8 == 0)
 303   2      			Play_y = Down(Play_x, Play_y, Map);
 304   2      		else if (SW4 == 0)
 305   2      			Play_x = Left(Play_x, Play_y, Map);
 306   2      		else if (SW6 == 0)
 307   2      			Play_x = Right(Play_x, Play_y, Map);
 308   2      		else if (SW3 == 0)
 309   2      			cheatMap(Map, 12, 12);
 310   2      		//Check if Game Over
 311   2      		if (Map[Play_x][Play_y] == 'G'){
 312   3      			GameOver = 1;
 313   3      			//win();
 314   3      		}
 315   2      			
 316   2      	}
 317   1      	return GameOver;
 318   1      }
 319          
 320          void playMenu()
 321          {
 322   1      	char reset = 0;
 323   1      	
 324   1      	char* title = "Simon's A-MAZE-ing Adventures!";
 325   1      	char* star_bar = "*********************************";
 326   1      	char* menu1 = "Please select difficulty level: \n";
 327   1      	char* menu2 = "1) Easy          2) Medium          3) Hard \n";
 328   1      
 329   1      	unsigned char i = 0;
 330   1      	while (star_bar[i] != '\0')
 331   1      	{
 332   2      		uart_transmit(star_bar[i]);
 333   2      		i++;
 334   2      	}
 335   1      	uart_transmit('\n');
 336   1      	uart_transmit('\r');
 337   1      	i = 0;
 338   1      	while (title[i] != '\0')
 339   1      	{
 340   2      		uart_transmit(title[i]);
 341   2      		i++;
 342   2      	}
 343   1      	uart_transmit('\n');
 344   1      	uart_transmit('\r');
 345   1      	i = 0;
 346   1      	while (star_bar[i] != '\0')
 347   1      	{
 348   2      		uart_transmit(star_bar[i]);
 349   2      		i++;
 350   2      	}
 351   1      	uart_transmit('\n');
 352   1      	uart_transmit('\r');
 353   1      	uart_transmit('\n');
 354   1      	uart_transmit('\r');
 355   1      	i = 0;
 356   1      	while (menu1[i] != '\0')
 357   1      	{
 358   2      		uart_transmit(menu1[i]);
 359   2      		i++;
 360   2      	}
 361   1      	uart_transmit('\n');
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:21:30 PAGE 7   

 362   1      	uart_transmit('\r');
 363   1      	i = 0;
 364   1      	while (menu2[i] != '\0')
 365   1      	{
 366   2      		uart_transmit(menu2[i]);
 367   2      		i++;
 368   2      	}
 369   1      	uart_transmit('\n');
 370   1      	uart_transmit('\r');
 371   1      	i = 0;
 372   1      
 373   1      	while (reset == 0)
 374   1      	{
 375   2      		if (SW3 == 0)
 376   2      			reset = GameStart(map1, 2, 1); //fix valuse to actual variables here
 377   2      		//victory
 378   2      		else if (SW7 == 0)
 379   2      			reset = GameStart(map2, 1, 1);
 380   2      		//victory
 381   2      		else if (SW9 == 0)
 382   2      			reset = GameStart(map3, 10, 2);
 383   2      		//victory
 384   2      	}
 385   1      
 386   1      	return;
 387   1      }
 388          
 389          void clearGame()
 390          {
 391   1      	LED1 = 1;
 392   1      	LED2 = 1;
 393   1      	LED3 = 1;
 394   1      	LED4 = 1;
 395   1      	LED5 = 1;
 396   1      	LED6 = 1;
 397   1      	LED7 = 1;
 398   1      	LED8 = 1;
 399   1      	LED9 = 1;
 400   1      
 401   1      	return;
 402   1      }
 403          
 404          //After pressing the help button
 405          void Help(unsigned char Play_x, unsigned char Play_y, char Map[12][12]) {
 406   1      	char i = 0;	
 407   1      
 408   1      	if (Map[Play_x][Play_y] == 'U') {
 409   2      		i = 0;
 410   2      		for (i; i < 3; i++) {
 411   3      			LED6 = 0;
 412   3      			delay(10000);
 413   3      			LED6 = 1;
 414   3      			delay(10000);
 415   3      		}
 416   2      	}
 417   1      	else if (Map[Play_x][Play_y] == 'D') {
 418   2      		i = 0;
 419   2      		for (i; i < 3; i++) {
 420   3      			LED4 = 0;
 421   3      			delay(10000);
 422   3      			LED4 = 1;
 423   3      			delay(10000);
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:21:30 PAGE 8   

 424   3      		}
 425   2      	}
 426   1      	else if (Map[Play_x][Play_y] == 'L') {
 427   2      		i = 0;
 428   2      		for (i; i < 3; i++) {
 429   3      			LED2 = 0;
 430   3      			delay(10000);
 431   3      			LED2 = 1;
 432   3      			delay(10000);
 433   3      		}
 434   2      	}
 435   1      	else if (Map[Play_x][Play_y] == 'R') {
 436   2      		i = 0;
 437   2      		for (i; i < 3; i++) {
 438   3      			LED8 = 0;
 439   3      			delay(10000);
 440   3      			LED8 = 1;
 441   3      			delay(10000);
 442   3      		}
 443   2      	}
 444   1      
 445   1      }
 446          
 447          //SOUND STUFF
 448          #define SPEAKER
 449          
 450          #define OSC_FREQ 73732800 
 451          #define N_PAUSE 250 
 452          #define delay_t 700 //max delay
 453          #define TEMPO			(OSC_FREQ/204800)		/* Duration of a 64th note */
 454          
 455          #ifdef SPEAKER
 456          #define E3				((OSC_FREQ/4)/164.81)  // P1,P2-allon   	(61)
 457          #define F3				((OSC_FREQ/4)/174.61)  // P1,P0-allon		(60)
 458          #define G3				((OSC_FREQ/4)/196.00)  // P2-allon			(29)
 459          #define Ab3				((OSC_FREQ/4)/207.65)  // P0-allon			(28)
 460          #define A3				((OSC_FREQ/4)/220.00)  // P1,P0-Yel,Amb		(62)
 461          #define Bb3				((OSC_FREQ/4)/233.08)  // P1,P2-Yel,Grn		(49)
 462          #define B3				((OSC_FREQ/4)/246.94)  // P0-Yel,Amb		(30)
 463          #define C4				((OSC_FREQ/4)/261.63)  // P2-Yel,Grn		(17)
 464          #define Db4				((OSC_FREQ/4)/277.18)  // P1,P0-Red,Grn		(46)
 465          #define D4				((OSC_FREQ/4)/293.67)  // P0-Red,Grn		(14)
 466          #define Eb4				((OSC_FREQ/4)/311.13)  // P1,P2-Red,Amb		(43)
 467          #define E4				((OSC_FREQ/4)/329.63)  // P2-Red,Amb		(11)
 468          #define F4				((OSC_FREQ/4)/349.23)  // P1,P0-Yel,Grn		(48)
 469          #define Gb4				((OSC_FREQ/4)/369.99)  // P1,P0-Amb,Grn		(50)
 470          #define G4				((OSC_FREQ/4)/392.00)  // P0-Amb,Grn		(18)
 471          #define Ab4				((OSC_FREQ/4)/415.30)  // P1,P0-Red,Yel		(44)
 472          #define A4				((OSC_FREQ/4)/440.00)  // P0-Red,Yel		(12)
 473          #define Bb4				((OSC_FREQ/4)/466.16)  // P1,P0-Red,Amb		(42)
 474          #define B4				((OSC_FREQ/4)/493.88)  // P0-Red,Amb		(10)
 475          #define C5				((OSC_FREQ/4)/523.25)  // P0-Yel,Grn		(16)
 476          #define Db5				((OSC_FREQ/4)/554.37)  // P1, P2-Red,Grn	(47)
 477          #define D5				((OSC_FREQ/4)/587.33)  // P2-Red,Grn		(15)
 478          #define Eb5				((OSC_FREQ/4)/622.25)  // P1,P2-Amb,Grn		(51)
 479          #define E5				((OSC_FREQ/4)/659.26)  // P2-Amb,Grn		(19)
 480          #define F5				((OSC_FREQ/4)/698.46)  // P2-Yel,Amb		(31)
 481          #define Gb5				((OSC_FREQ/4)/739.99)  // P1,P2-Yel,Amb		(63)
 482          #define G5				((OSC_FREQ/4)/783.99)  // P2-Red,Yel		(13)
 483          #define Ab5				((OSC_FREQ/4)/830.61)  // P1,P2-Red,Yel 	(45)	
 484          #define A5				((OSC_FREQ/4)/880.00)  // P1,P0-Grn			(38)
 485          #define Bb5				((OSC_FREQ/4)/932.33)  // P1,P0-Yel			(36)
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:21:30 PAGE 9   

 486          #define B5				((OSC_FREQ/4)/987.77)  // P1,P2-Grn			(39)
 487          #define C6				((OSC_FREQ/4)/1046.5)  // P2-Grn (per_08)	(7)
 488          #define Db6				((OSC_FREQ/4)/1108.7)  // P1,P0-Red			(40)
 489          #define D6				((OSC_FREQ/4)/1174.7)  // P0-Red			(8)
 490          #define Eb6				((OSC_FREQ/4)/1244.5)  // P1,P2-Amb			(41)
 491          #define E6				((OSC_FREQ/4)/1318.5)  // P2-Amb (per_04)	(9)
 492          #define F6				((OSC_FREQ/4)/1396.9)  // P0-Grn			(6)
 493          #define Gb6				((OSC_FREQ/4)/1480.0)  // P1,P2-Yel			(35)
 494          #define G6				((OSC_FREQ/4)/1568.0)  // P2-Yel (per_02)	(3)
 495          #define Ab6				((OSC_FREQ/4)/1661.2)  // P1,P0-Amb			(34)
 496          #define A6				((OSC_FREQ/4)/1760.0)  // P0-Amb			(2)
 497          #define Bb6				((OSC_FREQ/4)/1864.7)  // P1,P2-Red			(33)
 498          #define B6				((OSC_FREQ/4)/1975.5)  // P2-Red (per_01)	(1)
 499          #define C7				((OSC_FREQ/4)/2093.0)  // P0-Yel			(4)
 500          #define D7				((OSC_FREQ/4)/2349.3)  // P1				(32)
 501          #endif
 502          
 503          #ifdef SPEAKER
 504          code int   period[] = { 0, B6, A6, G6, C7, 0, F6, C6, D6, E6, B4, E4, A4, G5, D4, D5, C5,
 505          C4, G4, E5, 0, 0, 0, 0, 0, 0, 0, 0, Ab3, G3, B3, F5, D7,
 506          Bb6, Ab6, Gb6, Bb5, 0, A5, B5, Db6, Eb6, Bb4, Eb4, Ab4, Ab5, Db4, Db5, F4,
 507          Bb3, Gb4, Eb5, 0, 0, 0, 0, 0, 0, 0, 0, F3, E3, A3, Gb5 };
 508          
 509          int* pointer;
 510          
 511          code char  notes[4][20] = {// Victory Fanfare
 512          	11, 11, 11, 11, 17, 14, 11, 14, 11, 31, 48, 31, 48, 45, 0, 0, 0, 0, 0, 0,
 513          	17, 45, 38, 45, 38, 38, 31, 48, 11, 48, 14, 14, 31, 48, 31, 48, 45, 0, 0, 0,
 514          	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 515          	17, 45, 31, 45, 38, 38, 31, 48, 31, 45, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, };
 516          code char  dur[4][20] = {	// Victory Fanfare
 517          	16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 8, 32, 0, 0, 0, 0, 0,
 518          	16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 8, 32, 0, 0, 0, 0, 0,
 519          	16, 16, 16, 16, 16, 8, 8, 16, 16, 16, 8, 8, 16, 16, 16, 16, 32, 0, 0, 0,
 520          	16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 8, 32, 0, 0, 0, 0, 0, };
 521          
 522          void clk(void) interrupt 3 using 1
 523          {
 524   1      	TH1 = -(*pointer) >> 8;
 525   1      	TL1 = -(*pointer) & 0x0ff;
 526   1      	SPEAK = ~SPEAK;
 527   1      }
 528          #endif
 529          
 530          void wallHit(void)
 531          {
 532   1      	ET0=0;//sets timer on
 533   1      	pointer = 9;
*** WARNING C196 IN LINE 533 OF .\MAZE.C: mspace probably invalid
 534   1      	TF0=0;
 535   1      	Delay250HZ();
 536   1      	
 537   1      	pointer = 61;
*** WARNING C196 IN LINE 537 OF .\MAZE.C: mspace probably invalid
 538   1      	TF0=0;
 539   1      	Delay250HZ();
 540   1      	ET0=1;
 541   1      	return;
 542   1      }
 543          
 544          void Delay250HZ(void)
 545          {
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:21:30 PAGE 10  

 546   1      	SPEAK=0;
 547   1      	TF0=0;
 548   1      	TL0=0x33;
 549   1      	TH0=0xFB;
 550   1      	TR0=1;
 551   1      	while(TF0 != 1)
 552   1      	{};
 553   1      	TR0=0;
 554   1      	TF0=0;
 555   1      	SPEAK=1;
 556   1      	return;
 557   1      }
 558          
 559          void win(void)
 560          {
 561   1      	char n, d;
 562   1      	unsigned int i,j;
 563   1      	
 564   1      	i=0;
 565   1      	j=0;
 566   1      	
 567   1      	do 
 568   1      	{
 569   2      		n=notes[j][i];  // read next note and duration
 570   2      		d=dur[j][i];
 571   2      		do 
 572   2      		{
 573   3      			finish(n,d);  // use displ routine to play note and light LEDs
 574   3      			i++;
 575   3      			n=notes[j][i];  // repeat until dur=0 (indicates end of row (phrase))
 576   3      			d=dur[j][i];
 577   3      		} while (d!=0);
 578   2      	i=0;
 579   2      	j++;
 580   2      	} while (j < 4);
 581   1      	return;
 582   1      }
 583          
 584          #ifdef SPEAKER
 585          void finish(char n,char d)
 586          {
 587   1          //ET1=0;
 588   1      	//TR1=0;
 589   1      	int dur_time;
 590   1      	int t;
 591   1      	if (d==0) //boop
 592   1      	{
 593   2      		dur_time=delay_t; // delay_t is a global variable used by simon
 594   2      		t=0;
 595   2      	}
 596   1      	else
 597   1      	{
 598   2      		dur_time=TEMPO*d; // TEMPO defines speed of all songs
 599   2      		t=20;	     	  // t=20 puts a small delay between notes
 600   2      	}
 601   1      
 602   1        	pointer = &period[n];
 603   1      
 604   1          if( *pointer != 0 ) {
 605   2              /* Enable timer */
 606   2              TH1=-(*pointer)>>8;
 607   2              TL1=-(*pointer)&0x0ff;
C51 COMPILER V6.02  MAZE                                                                   05/12/2016 13:21:30 PAGE 11  

 608   2              TR1=0;
 609   2              ET1=0;
 610   2          }
 611   1      
 612   1          sdelay(dur_time);
 613   1      
 614   1          /* Disable timer */
 615   1          ET1=1;
 616   1          TR1=1;
 617   1      
 618   1      	if(t!=0) sdelay(t);
 619   1      
 620   1      	return;
 621   1      }
 622          #endif
 623          
 624          void sdelay(int time )
 625          {
 626   1          unsigned int i;
 627   1      
 628   1          while( time-- > 0 ) {
 629   2              for( i=0 ; i<N_PAUSE ; i++ ) ;
 630   2          }
 631   1      	return;
 632   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2422    ----
   CONSTANT SIZE    =    865    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      74
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
