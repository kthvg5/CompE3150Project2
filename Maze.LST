C51 COMPILER V6.02  MAZE                                                                   05/11/2016 21:27:55 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE MAZE
OBJECT MODULE PLACED IN .\Maze.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\Maze.c DEBUG OBJECTEXTEND

stmt level    source

   1          #include<reg932.h>
   2          #include<stdlib.h>
   3          #include "maps.h"
   4          #include "uart.h"
   5          
   6          
   7          sbit LED1 = P2 ^ 4;
   8          sbit LED2 = P0 ^ 5;
   9          sbit LED3 = P2 ^ 7;
  10          sbit LED4 = P0 ^ 6;
  11          sbit LED5 = P1 ^ 6;
  12          sbit LED6 = P0 ^ 4;
  13          sbit LED7 = P2 ^ 5;
  14          sbit LED8 = P0 ^ 7;
  15          sbit LED9 = P2 ^ 6;
  16          
  17          sbit SW1 = P2 ^ 0;
  18          sbit SW2 = P0 ^ 1;
  19          sbit SW3 = P2 ^ 3;
  20          sbit SW4 = P0 ^ 2;
  21          sbit SW5 = P1 ^ 4;
  22          sbit SW6 = P0 ^ 0;
  23          sbit SW7 = P2 ^ 1;
  24          sbit SW8 = P0 ^ 3;
  25          sbit SW9 = P2 ^ 2;
  26          
  27          void delay (long x);
  28          void cheatMap(/*const*/ char map_array[7][7], /*const*/ unsigned char arr_x, /*const*/ unsigned char arr_y
             -);
  29          void Redraw_Map(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]);
  30          char Up(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]);
  31          char Down(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]);
  32          char Left(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]);
  33          char Right(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]);
  34          void GameStart(/*const*/ char Map[7][7], /*const*/ unsigned char Start_x, /*const*/ unsigned char Start_y)
             -;
  35          void playMenu();
  36          
  37          //Looping Code for playing the game
  38          void main(void)
  39          {
  40   1      	P0M1 = 0;
  41   1      	P1M1 = 0;
  42   1      	P2M1 = 0;
  43   1      	P3M1 = 0;
  44   1      
  45   1      	uart_init();
  46   1      	
  47   1      	while (1)
  48   1      	{
  49   2      		playMenu();
  50   2      	}
  51   1      
  52   1      	return;
  53   1      }	
C51 COMPILER V6.02  MAZE                                                                   05/11/2016 21:27:55 PAGE 2   

  54          
  55          /*void delay(long x)
  56          {
  57          	long i = 0;
  58          	for (i; i<x; i++);
  59          }*/
  60          
  61          void cheatMap(/*const*/ char map_array[7][7], unsigned char arr_x, unsigned char arr_y) //rename map_array
             - to group code name for the map array
  62          {
  63   1      	unsigned char i;
  64   1      	unsigned char j;
  65   1      	for (i = 0; i < arr_x; i++)
  66   1      	{
  67   2      
  68   2      		for (j = 0; j < arr_y; j++)
  69   2      		{
  70   3      			uart_transmit(map_array[i][j]);
  71   3      		}
  72   2      		uart_transmit('\n');
  73   2      		uart_transmit('\r');//I think this will work?
  74   2      	}
  75   1      	return;
  76   1      }
  77          
  78          void Redraw_Map(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7])
  79          {
  80   1      	unsigned char i = 0;
  81   1      	//Shows what the 8 spaces around the player are
  82   1      	//LED1
  83   1      	if (Map[Play_x - 1][Play_y - 1] == 'W') //Wall
  84   1      		LED1 = 0;
  85   1      	else if (Map[Play_x - 1][Play_y - 1] == 'G')
  86   1      	{
  87   2      		for (i; i < 3; i++)
  88   2      		{
  89   3      			LED1 = 0;
  90   3      			delay(100);
  91   3      			LED1 = 1;
  92   3      			delay(100);
  93   3      		}
  94   2      	}
  95   1      	else //Open
  96   1      		LED1 = 1;
  97   1      	//LED2
  98   1      	if (Map[Play_x][Play_y - 1] == 'W') //Wall
  99   1      		LED2 = 0;
 100   1      	else if (Map[Play_x][Play_y - 1] == 'G') //Goal
 101   1      	{
 102   2      		for (i; i < 3; i++)
 103   2      		{
 104   3      			LED2 = 0;
 105   3      			delay(100);
 106   3      			LED2 = 1;
 107   3      			delay(100);
 108   3      		}
 109   2      	}
 110   1      	else //Open
 111   1      		LED2 = 1;
 112   1      	//LED3
 113   1      	if (Map[Play_x + 1][Play_y - 1] == 'W') //Wall
 114   1      		LED3 = 0;
C51 COMPILER V6.02  MAZE                                                                   05/11/2016 21:27:55 PAGE 3   

 115   1      	else if (Map[Play_x + 1][Play_y - 1] == 'G') //Goal
 116   1      	{
 117   2      		for (i; i < 3; i++)
 118   2      		{
 119   3      			LED3 = 0;
 120   3      			delay(100);
 121   3      			LED3 = 1;
 122   3      			delay(100);
 123   3      		}
 124   2      	}
 125   1      	else //Open
 126   1      		LED3 = 1;
 127   1      	//LED4
 128   1      	if (Map[Play_x - 1][Play_y] == 'W') //Wall
 129   1      		LED4 = 0;
 130   1      	else if (Map[Play_x - 1][Play_y] == 'G') //Goal
 131   1      	{
 132   2      		for (i; i < 3; i++)
 133   2      		{
 134   3      			LED4 = 0;
 135   3      			delay(100);
 136   3      			LED4 = 1;
 137   3      			delay(100);
 138   3      		}
 139   2      	}
 140   1      	else //Open
 141   1      		LED4 = 1;
 142   1      	//LED5
 143   1      	if (Map[Play_x][Play_y] == 'W') //Wall
 144   1      		LED5 = 0;
 145   1      	else if (Map[Play_x][Play_y] == 'G') //Goal
 146   1      	{
 147   2      		for (i; i < 3; i++)
 148   2      		{
 149   3      			LED5 = 0;
 150   3      			delay(100);
 151   3      			LED5 = 1;
 152   3      			delay(100);
 153   3      		}
 154   2      	}
 155   1      	else //Open
 156   1      		LED5 = 1;
 157   1      	//LED6
 158   1      	if (Map[Play_x + 1][Play_y] == 'W') //Wall
 159   1      		LED6 = 0;
 160   1      	else if (Map[Play_x + 1][Play_y] == 'G') //Goal
 161   1      	{
 162   2      		for (i; i < 3; i++)
 163   2      		{
 164   3      			LED6 = 0;
 165   3      			delay(100);
 166   3      			LED6 = 1;
 167   3      			delay(100);
 168   3      		}
 169   2      	}
 170   1      	else //Open
 171   1      		LED6 = 1;
 172   1      	//LED7
 173   1      	if (Map[Play_x - 1][Play_y + 1] == 'W') //Wall
 174   1      		LED7 = 0;
 175   1      	else if (Map[Play_x - 1][Play_y + 1] == 'G') //Goal
 176   1      	{
C51 COMPILER V6.02  MAZE                                                                   05/11/2016 21:27:55 PAGE 4   

 177   2      		for (i; i < 3; i++)
 178   2      		{
 179   3      			LED7 = 0;
 180   3      			delay(100);
 181   3      			LED7 = 1;
 182   3      			delay(100);
 183   3      		}
 184   2      	}
 185   1      	else //Open
 186   1      		LED7 = 1;
 187   1      	//LED8
 188   1      	if (Map[Play_x][Play_y + 1] == 'W') //Wall
 189   1      		LED8 = 0;
 190   1      	else if (Map[Play_x][Play_y + 1] == 'G') //Goal
 191   1      	{
 192   2      		for (i; i < 3; i++)
 193   2      		{
 194   3      			LED8 = 0;
 195   3      			delay(100);
 196   3      			LED8 = 1;
 197   3      			delay(100);
 198   3      		}
 199   2      	}
 200   1      	else //Open
 201   1      		LED8 = 1;
 202   1      	//LED9
 203   1      	if (Map[Play_x + 1][Play_y + 1] == 'W') //Wall
 204   1      		LED9 = 0;
 205   1      	else if (Map[Play_x + 1][Play_y + 1] == 'G') //Goal
 206   1      	{
 207   2      		for (i; i < 3; i++)
 208   2      		{
 209   3      			LED9 = 0;
 210   3      			delay(100);
 211   3      			LED9 = 1;
 212   3      			delay(100);
 213   3      		}
 214   2      	}
 215   1      	else //Open
 216   1      		LED9 = 1;
 217   1      
 218   1      	return;
 219   1      }
 220          //Button Actions
 221          //Up button
 222          char Up(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]) {
 223   1      	if (Map[Play_x][Play_y - 1] != 'W')
 224   1      		Play_y -= 1;
 225   1      	Redraw_Map(Play_x, Play_y, Map);
 226   1      	return Play_y;
 227   1      }
 228          
 229          //Down
 230          char Down(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]) {
 231   1      	if (Map[Play_x][Play_y + 1] != 'W')
 232   1      		Play_y += 1;
 233   1      	Redraw_Map(Play_x, Play_y, Map);
 234   1      	return Play_y;
 235   1      }
 236          
 237          //Right 
 238          char Right(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]) {
C51 COMPILER V6.02  MAZE                                                                   05/11/2016 21:27:55 PAGE 5   

 239   1      	if (Map[Play_x + 1][Play_y] != 'W')
 240   1      		Play_x += 1;
 241   1      	Redraw_Map(Play_x, Play_y, Map);
 242   1      	return Play_x;
 243   1      }
 244          
 245          //Left 
 246          char Left(unsigned char Play_x, unsigned char Play_y, /*const*/ char Map[7][7]) {
 247   1      	if (Map[Play_x - 1][Play_y] != 'W')
 248   1      		Play_x -= 1;
 249   1      	Redraw_Map(Play_x, Play_y, Map);
 250   1      	return Play_x;
 251   1      }
 252          //Check if Player is at goal
 253          
 254          void GameStart(/*const*/ char Map[7][7], /*const*/ unsigned char Start_x, /*const*/ unsigned char Start_y)
             - {
 255   1      	unsigned char GameOver = 0; //reset every new game
 256   1      	unsigned char Play_x = Start_x;	//Load starting positions
 257   1      	unsigned char Play_y = Start_y;
 258   1      	unsigned char i = 0;
 259   1      	unsigned char k = 0;
 260   1      
 261   1      	//to transmit a number, use value+48
 262   1      
 263   1      	uart_transmit(Play_x+48);
 264   1      	uart_transmit('\n');
 265   1      	uart_transmit('\r');
 266   1      	uart_transmit(Play_y+48);
 267   1      	uart_transmit('\n');
 268   1      	uart_transmit('\r');
 269   1      
 270   1      	Redraw_Map(Play_x, Play_y, Map);
 271   1      
 272   1      	while (GameOver == 0) 
 273   1      	{ //This loop plays the game until finished
 274   2      		while (SW1 == 0 || SW3 == 0 || SW2 == 0 || SW8 == 0 || SW4 == 0 || SW6 == 0) 
 275   2      		{ //Check if any input
 276   3      			//Nothing to do here
 277   3      		}
 278   2      
 279   2      		delay(10);
 280   2      		uart_transmit(Play_x + 48);
 281   2      		uart_transmit('\n');
 282   2      		uart_transmit('\r');
 283   2      		uart_transmit(Play_y + 48);
 284   2      		uart_transmit('\n');
 285   2      		uart_transmit('\r');
 286   2      		//waiting for input
 287   2      		if (SW1 == 0) //Exit Button
 288   2      			GameOver = 0;
 289   2      		else if (SW5 == 0) // Help Button
 290   2      			;//Help(Play_x, Play_y, Map[][]);
 291   2      		else if (SW2 == 0)
 292   2      			Play_y = Up(Play_x, Play_y, Map);
 293   2      		else if (SW8 == 0)
 294   2      			Play_y = Down(Play_x, Play_y, Map);
 295   2      		else if (SW4 == 0)
 296   2      			Play_x = Left(Play_x, Play_y, Map);
 297   2      		else if (SW6 == 0)
 298   2      			Play_x = Right(Play_x, Play_y, Map);
 299   2      		else if (SW3 == 0)
C51 COMPILER V6.02  MAZE                                                                   05/11/2016 21:27:55 PAGE 6   

 300   2      			cheatMap(Map, 7, 7);
 301   2      		//Check if Game Over
 302   2      		if (Map[Play_x][Play_y] == 'G')
 303   2      			GameOver = 1;
 304   2      	}
 305   1      	return;
 306   1      }
 307          
 308          void playMenu()
 309          {
 310   1      	char* title = "Simon's A-MAZE-ing Adventures!";
 311   1      	char* star_bar = "*********************************";
 312   1      	char* menu1 = "Please select difficulty level: \n";
 313   1      	char* menu2 = "1) Easy          2) Medium          3) Hard \n";
 314   1      
 315   1      	unsigned char i = 0;
 316   1      	while (star_bar[i] != '\0')
 317   1      	{
 318   2      		uart_transmit(star_bar[i]);
 319   2      		i++;
 320   2      	}
 321   1      	uart_transmit('\n');
 322   1      	uart_transmit('\r');
 323   1      	i = 0;
 324   1      	while (title[i] != '\0')
 325   1      	{
 326   2      		uart_transmit(title[i]);
 327   2      		i++;
 328   2      	}
 329   1      	uart_transmit('\n');
 330   1      	uart_transmit('\r');
 331   1      	i = 0;
 332   1      	while (star_bar[i] != '\0')
 333   1      	{
 334   2      		uart_transmit(star_bar[i]);
 335   2      		i++;
 336   2      	}
 337   1      	uart_transmit('\n');
 338   1      	uart_transmit('\r');
 339   1      	uart_transmit('\n');
 340   1      	uart_transmit('\r');
 341   1      	i = 0;
 342   1      	while (menu1[i] != '\0')
 343   1      	{
 344   2      		uart_transmit(menu1[i]);
 345   2      		i++;
 346   2      	}
 347   1      	uart_transmit('\n');
 348   1      	uart_transmit('\r');
 349   1      	i = 0;
 350   1      	while (menu2[i] != '\0')
 351   1      	{
 352   2      		uart_transmit(menu2[i]);
 353   2      		i++;
 354   2      	}
 355   1      	uart_transmit('\n');
 356   1      	uart_transmit('\r');
 357   1      	i = 0;
 358   1      
 359   1      	while (1)
 360   1      	{
 361   2      		if (SW3 == 0)
C51 COMPILER V6.02  MAZE                                                                   05/11/2016 21:27:55 PAGE 7   

 362   2      			GameStart(map1, 1, 2);
 363   2      		//victory
 364   2      		/*else if (SW7 == 0)
 365   2      			//GameStart(&(&map2[0][0]), M2startX, M2startY);
 366   2      		//victory
 367   2      		else if (SW9 == 0)*/
 368   2      			//GameStart(&(&map3[0][0]), M3startX, M3startY);
 369   2      		//victory
 370   2      	}
 371   1      
 372   1      	return;
 373   1      }
 374          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1634    ----
   CONSTANT SIZE    =    387    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      56
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
